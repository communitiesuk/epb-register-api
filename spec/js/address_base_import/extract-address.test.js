const extractAddress = require('../../../lib/js/address_base_import/extract-address')

const addressBaseHeaders = [
  'UPRN',
  'UDPRN',
  'CHANGE_TYPE',
  'STATE',
  'STATE_DATE',
  'CLASS',
  'PARENT_UPRN',
  'X_COORDINATE',
  'Y_COORDINATE',
  'LATITUDE',
  'LONGITUDE',
  'RPC',
  'LOCAL_CUSTODIAN_CODE',
  'COUNTRY',
  'LA_START_DATE',
  'LAST_UPDATE_DATE',
  'ENTRY_DATE',
  'RM_ORGANISATION_NAME',
  'LA_ORGANISATION',
  'DEPARTMENT_NAME',
  'LEGAL_NAME',
  'SUB_BUILDING_NAME',
  'BUILDING_NAME',
  'BUILDING_NUMBER',
  'SAO_START_NUMBER',
  'SAO_START_SUFFIX',
  'SAO_END_NUMBER',
  'SAO_END_SUFFIX',
  'SAO_TEXT',
  'ALT_LANGUAGE_SAO_TEXT',
  'PAO_START_NUMBER',
  'PAO_START_SUFFIX',
  'PAO_END_NUMBER',
  'PAO_END_SUFFIX',
  'PAO_TEXT',
  'ALT_LANGUAGE_PAO_TEXT',
  'USRN',
  'USRN_MATCH_INDICATOR',
  'AREA_NAME',
  'LEVEL',
  'OFFICIAL_FLAG',
  'OS_ADDRESS_TOID',
  'OS_ADDRESS_TOID_VERSION',
  'OS_ROADLINK_TOID',
  'OS_ROADLINK_TOID_VERSION',
  'OS_TOPO_TOID',
  'OS_TOPO_TOID_VERSION',
  'VOA_CT_RECORD',
  'VOA_NDR_RECORD',
  'STREET_DESCRIPTION',
  'ALT_LANGUAGE_STREET_DESCRIPTION',
  'DEPENDENT_THOROUGHFARE',
  'THOROUGHFARE',
  'WELSH_DEPENDENT_THOROUGHFARE',
  'WELSH_THOROUGHFARE',
  'DOUBLE_DEPENDENT_LOCALITY',
  'DEPENDENT_LOCALITY',
  'LOCALITY',
  'WELSH_DEPENDENT_LOCALITY',
  'WELSH_DOUBLE_DEPENDENT_LOCALITY',
  'TOWN_NAME',
  'ADMINISTRATIVE_AREA',
  'POST_TOWN',
  'WELSH_POST_TOWN',
  'POSTCODE',
  'POSTCODE_LOCATOR',
  'POSTCODE_TYPE',
  'DELIVERY_POINT_SUFFIX',
  'ADDRESSBASE_POSTAL',
  'PO_BOX_NUMBER',
  'WARD_CODE',
  'PARISH_CODE',
  'RM_START_DATE',
  'MULTI_OCC_COUNT',
  'VOA_NDR_P_DESC_CODE',
  'VOA_NDR_SCAT_CODE',
  'ALT_LANGUAGE'
]

const addressBaseEntryFromValues = values => Object.fromEntries(addressBaseHeaders.map((header, i) => [header, values[i]]))

const numberTen = [
  '100023336956',
  23_747_771,
  'I',
  2,
  '2001-03-19',
  'RD04',
  null,
  530_047.00,
  179_951.00,
  51.5035410,
  -0.1276700,
  2,
  5990,
  'E',
  '2007-12-28',
  '2020-05-02',
  '2001-03-19',
  'PRIME MINISTER & FIRST LORD OF THE TREASURY',
  '',
  '',
  '',
  '',
  '',
  10,
  null,
  '',
  null,
  '',
  '',
  '',
  10,
  '',
  null,
  '',
  '',
  '',
  8_400_071,
  '1',
  '',
  '',
  '',
  'osgb1000002148079385',
  7,
  'osgb5000005158744708',
  1,
  'osgb1000005572568',
  6,
  186_814_088,
  null,
  'DOWNING STREET',
  '',
  '',
  'DOWNING STREET',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  'LONDON',
  'CITY OF WESTMINSTER',
  'LONDON',
  '',
  'SW1A 2AA',
  'SW1A 2AA',
  'L',
  '1A',
  'D',
  '',
  'E05000644',
  '',
  '2012-03-19',
  1,
  '',
  '',
  ''
]

test('when importing the data for 10 downing street', () => {
  const expected = {
    uprn: '100023336956',
    postcode: 'SW1A 2AA',
    address_line1: '10 DOWNING STREET',
    address_line2: null,
    address_line3: null,
    address_line4: null,
    town: 'LONDON',
    classification_code: 'RD04',
    address_type: 'Delivery Point'
  }
  expect(extractAddress(addressBaseEntryFromValues(numberTen))).toEqual(expected)
})

const nottsPond = [
  '10025731071',
  null,
  'I',
  null,
  null,
  'LW02IW',
  null,
  497_657.18,
  319_960.70,
  52.7684428,
  -0.5539914,
  1,
  7655,
  'E',
  '2018-11-29',
  '2019-06-02',
  '2018-11-27',
  '',
  '',
  '2018-11-27',
  '',
  '',
  '',
  '',
  '',
  '',
  null,
  null,
  '',
  null,
  '',
  '',
  '',
  null,
  '',
  null,
  '',
  'CENTRE OF POND 238M FROM KAAIMANS INTERNATIONAL, UNIT 4, TOLLERTON HALL 254M FROM UNNAMED',
  '',
  33_002_303,
  '2',
  '',
  '',
  'N',
  '',
  null,
  'osgb5000005220644080',
  1,
  'osgb1000002083774996',
  5,
  null,
  null,
  'TOLLERTON LANE',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  'TOLLERTON',
  'NOTTINGHAMSHIRE',
  '',
  '',
  '',
  'NG12 4GQ',
  '',
  '',
  'N',
  '',
  'E05009731',
  'E04008010',
  null,
  0,
  '',
  '',
  ''
]

test('when importing the data for a pond in nottinghamshire, it responds with null as ponds are not certifiable', () => {
  expect(extractAddress(addressBaseEntryFromValues(nottsPond))).toBe(null)
})

const residentialNoPostalDevonAddress = [
  '10023353973',
  null,
  'I',
  3,
  '2016-01-15',
  'RD06',
  10_002_296_559,
  227_014.30,
  102_933.65,
  50.8000700,
  -4.4561946,
  2,
  1145,
  'E',
  '2010-07-22',
  '2019-04-28',
  '2010-07-20',
  '',
  '',
  '',
  '',
  '',
  '',
  null,
  null,
  '',
  null,
  '',
  'ANNEXE',
  '',
  null,
  '',
  null,
  '',
  'AGENA',
  '',
  40_902_264,
  '1',
  '',
  '',
  'N',
  '',
  null,
  'osgb4000000020915444',
  8,
  'osgb1000021646431',
  3,
  235_095_000,
  null,
  'ROAD FROM JEWELLS CROSS TO LITTLE BRIDGE CROSS',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  'BRIDGERULE',
  'DEVON',
  '',
  '',
  '',
  'EX22 7EX',
  '',
  '',
  'C',
  '',
  'E05011925',
  'E04003251',
  null,
  0,
  '',
  '',
  ''
]

test('when a residential house has no postal address, it uses a geographic address', () => {
  const expected = {
    uprn: '10023353973',
    postcode: 'EX22 7EX',
    address_line1: 'ANNEXE',
    address_line2: 'AGENA',
    address_line3: 'ROAD FROM JEWELLS CROSS TO LITTLE BRIDGE CROSS',
    address_line4: null,
    town: 'BRIDGERULE',
    classification_code: 'RD06',
    address_type: 'Geographic'
  }
  expect(extractAddress(addressBaseEntryFromValues(residentialNoPostalDevonAddress))).toEqual(expected)
})

const letteredNumberedAddress = [
  '90090877',
  '7645063',
  'I',
  2,
  '2007-10-09',
  'RD04',
  null,
  394_096.94,
  288_199.29,
  52.4916876,
  -2.0883638,
  1,
  4615,
  'E',
  '2008-01-03',
  '2020-06-13',
  '2001-02-12',
  '',
  '',
  '',
  '',
  '',
  '8A',
  null,
  null,
  '',
  null,
  '',
  '',
  '',
  8,
  'A',
  null,
  '',
  '',
  '',
  11_400_396,
  '1',
  '',
  '',
  'Y',
  'osgb1000002247769942',
  8,
  'osgb4000000017856380',
  5,
  'osgb1000019544958',
  4,
  72_803_239,
  null,
  'HILL STREET',
  '',
  '',
  'HILL STREET',
  '',
  '',
  '',
  'NETHERTON',
  '',
  '',
  '',
  'NETHERTON',
  'DUDLEY',
  'DUDLEY',
  '',
  'DY2 0NZ',
  'DY2 0NZ',
  'S',
  '2T',
  'D',
  '',
  'E05001250',
  '',
  '2012-03-19',
  0,
  '',
  '',
  ''
]

test('it joins a lettered, numbered line onto the following non-empty line', () => {
  expect(extractAddress(addressBaseEntryFromValues(letteredNumberedAddress))).toEqual({
    uprn: '90090877',
    postcode: 'DY2 0NZ',
    address_line1: '8A HILL STREET',
    address_line2: 'NETHERTON',
    address_line3: null,
    address_line4: null,
    town: 'DUDLEY',
    classification_code: 'RD04',
    address_type: 'Delivery Point'
  })
})

const commercialWithDuplicateLocality = [
  '100100946350',
  '13523952',
  'I',
  2,
  '2009-03-19',
  'CR02',
  100_101_059_525,
  300_819.00,
  381_603.00,
  53.3220443,
  -3.4904488,
  2,
  6830,
  'W',
  '2008-02-27',
  '2020-06-13',
  '2003-02-17',
  'THOMSONS',
  'TUI',
  '',
  '',
  '',
  'UNIT 10',
  null,
  null,
  '',
  null,
  '',
  'UNIT 10',
  'UNIT 10',
  null,
  '',
  null,
  '',
  'WHITE ROSE CENTRE',
  'WHITE ROSE CENTRE',
  46_700_583,
  '1',
  '',
  '',
  'N',
  'osgb1000002166013658',
  14,
  'osgb5000005161922234',
  0,
  'osgb1000034315691',
  5,
  null,
  262_386_206,
  'HIGH STREET',
  'Y STRYD FAWR',
  'WHITE ROSE CENTRE',
  'HIGH STREET',
  'CANOLFAN Y RHOSYN GWYN',
  'STRYD FAWR',
  '',
  '',
  '',
  '',
  '',
  'RHYL',
  'DENBIGHSHIRE',
  'RHYL',
  'Y RHYL',
  'LL18 1EW',
  'LL18 1EW',
  'S',
  '2H',
  'D',
  '',
  'W05000174',
  'W04000173',
  '2012-03-19',
  0,
  'CS',
  '249',
  'CYM'
]

test('it removes the duplicate locality line from a geographic address', () => {
  expect(extractAddress(addressBaseEntryFromValues(commercialWithDuplicateLocality))).toEqual({
    uprn: '100100946350',
    postcode: 'LL18 1EW',
    address_line1: 'UNIT 10',
    address_line2: 'WHITE ROSE CENTRE',
    address_line3: 'HIGH STREET',
    address_line4: null,
    town: 'RHYL',
    classification_code: 'CR02',
    address_type: 'Geographic'
  })
})

const moreThanFourStreetLines = [
  '5870116854',
  '50537552',
  'I',
  2,
  '2007-10-10',
  'RD06',
  '5870117894',
  524_095.00,
  163_531.00,
  51.3573056,
  -0.2191271,
  2,
  5870,
  'E',
  '2007-12-13',
  '2018-09-23',
  '2006-11-22',
  '',
  '',
  '',
  '',
  'FLAT 12',
  'WELLS COURT',
  null,
  12,
  '',
  null,
  '',
  '',
  '',
  null,
  '',
  null,
  '',
  'WELLS COURT',
  '',
  22_605_929,
  '1',
  '',
  '',
  '',
  'osgb1000002230091572',
  5,
  'osgb5000005205514380',
  1,
  'osgb1000001799485796',
  4,
  5_960_011_000,
  null,
  'KILLICK MEWS',
  '',
  'KILLICK MEWS',
  'EWELL ROAD',
  '',
  '',
  '',
  'CHEAM',
  '',
  '',
  '',
  'CHEAM',
  'SUTTON',
  'SUTTON',
  '',
  'SM3 8AR',
  'SM3 8AR',
  'S',
  '1Z',
  'D',
  '',
  'E05000560',
  '',
  '2012-03-19',
  0,
  '',
  '',
  ''
]

test('it compacts all lines after line 4 onto one line separated by commas', () => {
  expect(extractAddress(addressBaseEntryFromValues(moreThanFourStreetLines))).toEqual({
    uprn: '5870116854',
    postcode: 'SM3 8AR',
    address_line1: 'FLAT 12',
    address_line2: 'WELLS COURT',
    address_line3: 'KILLICK MEWS',
    address_line4: 'EWELL ROAD, CHEAM',
    town: 'SUTTON',
    classification_code: 'RD06',
    address_type: 'Delivery Point'
  })
})
