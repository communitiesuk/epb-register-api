<?xml version="1.0" encoding="UTF-8"?>
<!--xs:schema xmlns="http://www.est.org.uk/epc/estcrV1/DCLG-CEPC" xmlns:UDT="http://www.est.org.uk/epc/estcrV1/DCLG-CEPC" xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.est.org.uk/epc/estcrV1/DCLG-CEPC" version="LIG-CEPC-7.0"-->
<xs:schema xmlns="http://www.est.org.uk/epc/estcrV1/DCLG-CEPC"
		   xmlns:CEPC="http://www.est.org.uk/epc/estcrV1/DCLG-CEPC"
		   xmlns:xs="http://www.w3.org/2001/XMLSchema"
		   targetNamespace="http://www.est.org.uk/epc/estcrV1/DCLG-CEPC"
		   elementFormDefault="qualified" version="LIG-CEPC-7.0">
	<xs:annotation>
		<xs:documentation>The purpose of Base Data Type declarations is to provide a point of declaration of all the primitive  datatypes that are in use within the domain and can be used to describe the contents of the Business Information Model.

A significant problem with the XML Schema Definition standard is that it is designed to solve a large number of software implementation problems and so provides an equally large number of datatypes with each datatype describing a variation on a theme.

For example as well as "number" we also have "short" (with a range of values corresponding to that which may be stored a 16 bit computer word), "long", "int", "integer", "decimal", "double", "byte" and quite a few other number variations. However many of these datatypes are highly-specialized computer-focused definitions that have little or no relevance to the Business stakeholders.

Most likely the business stakeholders would only recognise a limited number of datatypes - such as String, Date, Time, Integer, Decimal - and some domain-specific ones - such as Money (amount + currency attribute) - and will prefer the model to be restricted to that small set.

The advantages of defining a set of base data types and gathering them together in a single file are:
*	It allows documented controls to be placed on the primitive types that are used in any schema.
*	It will improve consistency of use of primitive types (e.g. consistent use of "integer" rather than "int", "long" etc.) that must be handled by applications
*	It will improve code reuse.
*	It allows standard attributes to be added to all elements whilst hiding the detail in a non business definition layer.

The principle is something like the way datayping is implemented in Java (as well as other programming languages) where every primitive datatype, such as "string", is wrapped by an equivalent complex class such as "String".The Java developer could declare object attributes using the "string" primitive but this isn't regarded as good practice. By using the "pfdt:string" class instead they are protected from physical changes to the implementation of "string" and also gain an extension point where additional behaviour not supported by the primitive datatype can be defined.

The declarations in this file underpin the User Defined Types, Message Infrastructure and Business Entity Template declarations. </xs:documentation>
	</xs:annotation>
	<xs:simpleType name="Percentage">
		<xs:restriction base="xs:decimal">
			<xs:maxInclusive value="100"/>
			<xs:minInclusive value="0"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:element name="Money" type="Money"/>
	<xs:complexType name="Money">
		<xs:annotation>
			<xs:documentation>Extension of a Decimal value for use with monetary values where a currency code needs to
be specified.

The currency code is actually metadata about the value so, in line with good XML practice, the Currency Code is declared as an XML-Attribute of the Money datatype rather than as a separate XML-Element.

The currency attribute should then include a list of valid currencies codes that are supported.</xs:documentation>
		</xs:annotation>
		<xs:simpleContent>
			<xs:extension base="xs:decimal">
				<xs:attribute name="currency" type="xs:string" use="optional"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<xs:simpleType name="Count">
		<xs:annotation>
			<xs:documentation>A count of the number of occurrences of something - must therefore be &gt;=0. This is the functional equivalent of the XML nonNegativeInteger datatype.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:integer"/>
	</xs:simpleType>
	<xs:element name="Classifier" type="Classifier"/>
	<xs:complexType name="Classifier">
		<xs:annotation>
			<xs:documentation>A Classifier is an extended datatype used as the basis for a data-item whose allowed values are restricted to a pre-defined set of Classifiers or Enumerated Codes.

Classifier should never actually be used as the datatype for any data-item in a finished data model because a specific Enumerated Domain should be declared for defining the specific values in the domain. However it is acceptable in an incomplete model where definition of the domain has yet to be completed.</xs:documentation>
		</xs:annotation>
		<xs:all/>
		<xs:attribute name="pid" type="xs:string" use="required"/>
	</xs:complexType>
	<xs:element name="Reference" type="Reference"/>
	<xs:complexType name="Reference">
		<xs:annotation>
			<xs:documentation>The Reference Data Type is any association between two Business Entities (or their sub-
components). In order to be consistent across the entire dataset all references contain the ID of the thing being referenced and the value actually assigned to the element is the 'display value'. The type of reference is derived from the underlying data model

This has a shortcoming in that we can't support multi-value keys using this datatype. However
I'm reluctant to extend the datatype to include the ID as a nested element because it becomes very cumbersome to use. Instead, in all likelihood, the Primary Key to any entity in a data processing application is likely to be a single-value, system-generated key so we're imposing that restriction here as well.</xs:documentation>
		</xs:annotation>
		<xs:all/>
	</xs:complexType>
	<xs:simpleType name="Measurement">
		<xs:annotation>
			<xs:documentation>A measurement of something such as a length or area. All measurements are to 2 decimal places and must be positive.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:decimal"/>
	</xs:simpleType>
	<xs:element name="IDString" type="IDString"/>
	<xs:complexType name="IDString">
		<xs:annotation>
			<xs:documentation>A string containing a unique identifier for something.

The underlying assumption is that each instance of a class or entity will have a unique identifier assigned to it which can then be assigned to any referencing entity as a reference to the entity instance.

This is a very similar concept to XML ID datatype but is locally defined because of the need to extend the datatype with domain specific attributes.</xs:documentation>
		</xs:annotation>
		<xs:simpleContent>
			<xs:extension base="xs:string"/>
		</xs:simpleContent>
	</xs:complexType>
	<xs:simpleType name="NumericString">
		<xs:annotation>
			<xs:documentation>A Numeric String is a string based datatype for representing strings, such as telephone numbers and IP addresses, that are limited to the numeric character-set.
</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="[0-9\-\.\+]+"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="Flag">
		<xs:annotation>
			<xs:documentation>The Boolean datatype is a redefinition of the XML Schema defined "Boolean". The XSD version is a logical True / False datatype whereas from a data processing perspective it is more likely to be a string based Y/N value. This could be seen as an Enumerated Domain but "Boolean" is so common that it makes more sense to be a base datatype.
</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:enumeration value="Y">
				<xs:annotation>
					<xs:documentation>Yes</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="N">
				<xs:annotation>
					<xs:documentation>No</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="LanguageCode">
		<xs:restriction base="xs:string">
			<xs:enumeration value="1">
				<xs:annotation>
					<xs:documentation>English</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="2">
				<xs:annotation>
					<xs:documentation>Welsh</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:element name="Sentence" type="Sentence"/>
	<xs:complexType name="Sentence">
		<xs:annotation>
			<xs:documentation>String value with a language code for natural-language text.</xs:documentation>
		</xs:annotation>
		<xs:simpleContent>
			<xs:extension base="xs:string">
				<xs:attribute name="language" type="LanguageCode" use="optional">
					<xs:annotation>
						<xs:documentation>Identifies the language that the sentence is recorded in.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<xs:simpleType name="ExtendedBoolean">
		<xs:annotation>
			<xs:documentation>An extended boolean type that also allows 'unknown' as a value.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:token">
			<xs:enumeration value="false"/>
			<xs:enumeration value="true"/>
			<xs:enumeration value="unknown"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="YN_Flag">
		<xs:restriction base="xs:string">
			<xs:enumeration value="Yes"/>
			<xs:enumeration value="No"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="ACI-RecommendationCode">
		<xs:restriction base="xs:string">
			<xs:enumeration value="OTHER">
				<xs:annotation>
					<xs:documentation>OTHER</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:element name="Flag_With_Note" type="Flag_With_Note"/>
	<xs:complexType name="Flag_With_Note">
		<xs:sequence>
			<xs:element name="Note" type="xs:string" minOccurs="0"/>
			<xs:element name="Flag" type="YN_Flag"/>
			<xs:element name="Guidance" type="ACI-Recommendations-List" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
	<xs:simpleType name="RRNType">
		<xs:annotation>
			<xs:documentation>The Report Reference Number is a 20-digit unique identifier assigned to each Report.

It is formatted as five blocks of four digits i.e. 9999-9999-9999-9999-9999 and generated by an algorithm described in Appendix A "Report ID Generation" of Section 18 "Transformation Rules" of the Technical Standards.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string">
			<xs:pattern value="[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9]{4}"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:element name="ACI-Recommendations-List" type="ACI-Recommendations-List"/>
	<xs:complexType name="ACI-Recommendations-List">
		<xs:sequence>
			<xs:element name="ACI-Recommendation" type="ACI-Recommendation" maxOccurs="unbounded"/>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="ForeignKey" type="ForeignKey"/>
	<xs:complexType name="ForeignKey">
		<xs:sequence/>
		<xs:attribute name="EntityName" type="xs:string" use="required"/>
		<xs:attribute name="KeyName" type="xs:string" use="optional"/>
		<xs:attribute name="DomainName" type="xs:string" use="optional"/>
	</xs:complexType>
	<xs:element name="ACI-Recommendation" type="ACI-Recommendation"/>
	<xs:complexType name="ACI-Recommendation">
		<xs:sequence>
			<xs:element name="Seq-Number" type="xs:int"/>
			<xs:element name="Code" type="ACI-RecommendationCode"/>
			<xs:element name="Text" type="xs:string"/>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="Note" type="Note"/>
	<xs:complexType name="Note">
		<xs:sequence>
			<xs:element name="Note" type="xs:string"/>
			<xs:element name="Guidance" type="ACI-Recommendations-List" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
	<xs:element name="ACRatedOuput" type="ACRatedOuput"/>
	<xs:complexType name="ACRatedOuput">
		<xs:choice>
			<xs:element name="AC-kW-Rating" type="xs:positiveInteger">
				<xs:annotation>
					<xs:documentation>Rating in kW</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="AC-Rating-Unknown-Flag" type="xs:boolean"/>
		</xs:choice>
	</xs:complexType>
	<xs:simpleType name="ACEstimatedOutput">
		<xs:restriction base="xs:int">
			<xs:enumeration value="1">
				<xs:annotation>
					<xs:documentation>Below 12kW</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="2">
				<xs:annotation>
					<xs:documentation>Between 12kW and 250kW</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="3">
				<xs:annotation>
					<xs:documentation>Greater than 250kW</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="ACInspectionCommissioned">
		<xs:restriction base="xs:int">
			<xs:enumeration value="1">
				<xs:annotation>
					<xs:documentation>Yes, inspection completed</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="2">
				<xs:annotation>
					<xs:documentation>Yes, inspection commissioned</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="3">
				<xs:annotation>
					<xs:documentation>No inspection completed or commissioned</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="4">
				<xs:annotation>
					<xs:documentation>Not relevant</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="5">
				<xs:annotation>
					<xs:documentation>Don't know</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="DECStatusCode">
		<xs:restriction base="xs:int">
			<xs:enumeration value="0">
				<xs:annotation>
					<xs:documentation>Standard DEC</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="1">
				<xs:annotation>
					<xs:documentation>Default DEC</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
			<xs:enumeration value="2">
				<xs:annotation>
					<xs:documentation>Asset Rating Only DEC</xs:documentation>
				</xs:annotation>
			</xs:enumeration>
		</xs:restriction>
	</xs:simpleType>
</xs:schema>
