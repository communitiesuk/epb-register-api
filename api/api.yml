openapi: 3.0.0

info:
  title: Energy Performance of Buildings Register API
  description: Public API for EPBR integrations
  version: 1.0.0-rc4

servers:
  - url: 'https://api.epb-integration.digital.communities.gov.uk/api'
    description: Integration Service
  - url: 'https://api.epb-staging.digital.communities.gov.uk/api'
    description: Staging Service
  - url: 'https://api.epb.digital.communities.gov.uk/api'
    description: Production Service

tags:
  - name: Search
    description: Search the register given filtering data
  - name: Manage Assessors
    description: Manage assessors for a given Scheme
  - name: Manage Assessments
    description: Manage EPCs, DECs, RRs and AC-REPORTs
  - name: Manage Addresses
    description: Manage addresses in the register
  - name: Manage Schemes
    description: Operations for managing schemes in the register
  - name: Migration
    description: Endpoints used to migrate information from the legacy system
  - name: Green Deal
    description: Endpoints used by the Green Deal register integration, including Renewable Heat Initiative

paths:
  /schemes:
    get:
      tags:
        - Manage Schemes
      summary: Get a list of all energy assessment schemes in the register
      security:
        - oauth:
            - 'scheme:list'
      parameters: []
      responses:
        200:
          description: List of all schemes
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      schemes:
                        type: array
                        items:
                          $ref: '#/components/schemas/Scheme'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Manage Schemes
      summary: Add a new energy assessment scheme to the register
      security:
        - oauth:
            - 'scheme:create'
      requestBody:
        description: The scheme to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemeBody'
      responses:
        201:
          description: Scheme successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Scheme'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Scheme already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                          example: SCHEME_ALREADY_EXISTS
                        title:
                          type: string
                          example: >-
                            A scheme with this name already exists in the
                            register

  /schemes/{schemeId}:
    put:
      tags:
        - Manage Schemes
      description: Update a scheme
      responses:
        204:
          description: Update successful
        404:
          description: Scheme not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      parameters:
        - in: path
          name: schemeId
          required: true
          description: The ID of the scheme being updated
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemeBody'

  /schemes/{schemeId}/assessors:
    get:
      tags:
        - Manage Assessors
      summary: List a summary of assessors belonging to a scheme
      security:
        - oauth:
            - 'scheme:assessor:list'
      parameters:
        - in: path
          name: schemeId
          required: true
          description: ID of the scheme
          schema:
            type: integer
      responses:
        200:
          description: List of assessors for a scheme
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      assessors:
                        type: array
                        items:
                          $ref: '#/components/schemas/AssessorBody'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Scheme not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /schemes/{schemeId}/assessors/{schemeAssessorId}:
    get:
      tags:
        - Manage Assessors
      summary: Get all details for an individual assessor registration
      security:
        - oauth:
            - 'scheme:assessor:fetch'
      parameters:
        - in: path
          name: schemeId
          required: true
          description: ID of the registering scheme
          schema:
            type: integer
        - in: path
          name: schemeAssessorId
          required: true
          description: The Assessor ID assigned by the registering scheme
          schema:
            $ref: '#/components/schemas/AssessorSchemeId'
      responses:
        200:
          description: Assessor found
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssessorBody'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Assessor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Manage Assessors
      summary: >-
        Register a new assessor to associate them with your scheme,
        or update details of an assessor already on your scheme.
      security:
        - oauth:
            - 'scheme:assessor:update'
      parameters:
        - in: path
          name: schemeId
          required: true
          description: ID of the registering scheme
          schema:
            type: integer
        - in: path
          name: schemeAssessorId
          required: true
          description: The Assessor ID assigned by the registering scheme
          schema:
            $ref: '#/components/schemas/AssessorSchemeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssessorBody'
      responses:
        200:
          description: Existing assessor updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssessorBody'
        201:
          description: New assessor successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssessorBody'
        400:
          description: Problem with assessor registration record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Assessor already exists on a different scheme
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        422:
          description: Assessor data is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /assessors:
    get:
      tags:
        - Search
        - Manage Assessors
      summary: 'Search for an assessor by postcode or full name
                Clients with scope assessor:search can search by
                  EITHER:
                  - a postcode (with scope assessor:search)
                  OR
                  - full name (with scope assessor:search)

                Clients with scope scheme:assessor:fetch can search by
                  - firstName AND lastName AND dateOfBirth'
      security:
        - oauth:
            - 'assessor:search'
            - 'scheme:assessor:fetch'
      parameters:
        - in: query
          name: postcode
          description: A postcode to search from for an assessor
          schema:
            $ref: '#/components/schemas/AddressPostcode'
        - in: query
          name: name
          description: The name of the assessor
          schema:
            $ref: '#/components/schemas/AssessorFullName'
        - in: query
          name: qualification
          description: Only show assessors who have this qualification
          schema:
            $ref: '#/components/schemas/AssessorQualificationSearchOptions'
        - in: query
          name: firstName
          description: The first name of the assessor
          schema:
            $ref: '#/components/schemas/FirstName'
        - in: query
          name: lastName
          description: The last name of the assessor
          schema:
            $ref: '#/components/schemas/LastName'
        - in: query
          name: dateOfBirth
          description: The date of birth of the assessor
          schema:
            $ref: '#/components/schemas/DateOfBirth'
      responses:
        200:
          description: List of assessors matching the search criteria
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/AssessorSearchResults'
                  - $ref: '#/components/schemas/AssessorSearchByPostcodeResults'
                  - $ref: '#/components/schemas/AssessorBody'
        400:
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /search/addresses:
    get:
      tags:
        - Search
        - Manage Addresses
      summary: 'Search for an address by (optional) type and
                EITHER:
                - a postcode (with optional building name or number)
                OR
                - a street AND town
                OR
                - a building reference number (UPRN or RRN)'
      security:
        - oauth:
            - 'search:addresses'
      parameters:
        - in: query
          name: postcode
          description: The postcode of the address being searched for
          schema:
            $ref: '#/components/schemas/AddressPostcode'
        - in: query
          name: buildingNameNumber
          description: The building name or number being searched for
          schema:
            type: string
          example: '47'
        - in: query
          name: street
          description: The street of the address being searched for
          schema:
            type: string
          example: 'High Road'
        - in: query
          name: town
          description: The city or town of the address being searched for
          schema:
            $ref: '#/components/schemas/AddressTown'
          example: 'Woking'
        - in: query
          name: addressId
          description: A known UPRN or RRN to fetch a single address
          schema:
            type: string
          example: 'UPRN-716375734512'
        - in: query
          name: addressType
          description: Domestic or commercial address
          schema:
            type: string
            enum:
              - DOMESTIC
              - COMMERCIAL
      responses:
        200:
          description: Address search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressSearchResults'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /assessments/search:
    get:
      tags:
        - Search
        - Manage Assessments
      summary: Search for assessments
      description: 'Search for an assessment by
                    EITHER:
                     - a postcode AND assessment type
                    OR
                     - a street AND town AND assessment type
                    OR
                     - an assessment reference number (RRN)'
      security:
        - oauth:
            - 'assessment:search'
      parameters:
        - in: query
          name: postcode
          description: The postcode of the address being searched for
          schema:
            $ref: '#/components/schemas/AddressPostcode'
          example: 'SW1A 2AA'
        - in: query
          name: assessment_type[]
          description: The type(s) of assessment being searched for
          schema:
            $ref: '#/components/schemas/AssessmentType'
          example: 'RdSAP'
        - in: query
          name: street_name
          description: The street of the assessment being searched for
          schema:
            type: string
          example: 'High Road'
        - in: query
          name: town
          description: The city or town of the assessment being searched for
          schema:
            $ref: '#/components/schemas/AddressTown'
          example: 'Woking'
        - in: query
          name: assessment_id
          description: The RRN of the assessment being searched for
          schema:
            $ref: '#/components/schemas/AssessmentId'
          example: '1234-2345-3456-4567-6789'
      responses:
        200:
          description: Assessment search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      assessments:
                        type: array
                        items:
                          $ref: '#/components/schemas/EnergyAssessmentSearchResult'
        400:
          description: Bad request - missing or malformed parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /assessments:
    post:
      tags:
        - Manage Assessments
        - Migration
      summary: Lodge or migrate a new assessment
      description: 'Single endpoint for POSTing all new lodgements.
                    It will accept as XML payload:
                    * A single <Report> for a domestic RdSAP assessment
                    * A single <Report> for a domestic SAP assessment
                    * Non-domestic EPC and Recommendation report in a single XML
                      payload with two <Report> elements
                    * Air Conditioning certificate and AC-report in a single XML
                      payload with two <Report> elements
                    * A single <Report> for DEC
                    * A single <Report> for DEC recommendation report
                    * DEC and DEC-RR in a single XML payload with two <Report>
                      elements'
      security:
        - oauth:
            - 'assessment:lodge'
            - 'migrate:assessment'
      parameters:
        - in: query
          name: override
          description: 'Only set to true after assessor has manually confirmed
                        desire to override lodgement rules. This action will be
                        logged.'
          schema:
            type: boolean
          example: true
        - in: query
          name: migrated
          description: 'For use by EPB register only. Set to true if migrating a
                        previous lodgement.
                        Requires migrate:assessment scope in client credentials.'
          schema:
            type: boolean
          example: true
      requestBody:
        content:
          application/xml+RdSAP-Schema-20.0.0:
            schema:
              $ref: '#/components/schemas/Empty'
          application/xml+SAP-Schema-18.0.0:
            schema:
              $ref: '#/components/schemas/Empty'
          application/xml+RdSAP-Schema-NI-20.0.0:
            schema:
              $ref: '#/components/schemas/Empty'
          application/xml+SAP-Schema-NI-18.0.0:
            schema:
              $ref: '#/components/schemas/Empty'
          application/xml+CEPC-8.0.0:
            schema:
              $ref: '#/components/schemas/Empty'
          application/xml+CEPC-NI-8.0.0:
            schema:
              $ref: '#/components/schemas/Empty'
      responses:
        201:
          description: New assessment(s) successfully lodged
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      assessments:
                        type: array
                        items:
                          type: string
                          properties:
                            assessmentId:
                              $ref: '#/components/schemas/AssessmentId'
                        example: ["9876-9876-9876-9876-9876", "8765-8765-8765-8765-8765"]
                  meta:
                    type: object
                    properties:
                      links:
                        type: object
                        properties:
                          assessments:
                            type: array
                            items:
                              type: string
                            example: ["/api/assessments/9876-9876-9876-9876-9876", "/api/assessments/8765-8765-8765-8765-8765"]
        400:
          description: Bad request - assessment violates lodgement rules. Re-POST to the override link to lodge anyway.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                          example: "FLOOR_AREA_LESS_THAN_ZERO"
                        title:
                          type: string
                          example: "Floor-Area must be greater than zero"
                  meta:
                    type: object
                    properties:
                      links:
                        type: object
                        properties:
                          override:
                            type: string
                            example: "/assessments?override=true"
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Assessment with that assessmentId already exists - retry with different RRN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error

  /assessments/{assessmentId}:
    get:
      tags:
        - Manage Assessments
      summary: Get an Energy Performance Assessment
      security:
        - oauth:
            - 'assessment:fetch'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being requested, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      responses:
        200:
          description: Energy Performance Assessment
          content:
            application/xml:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Empty'
        400:
          description: Bad request - The assessmentId parameter is badly formatted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Assessment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        410:
          description: >-
            Assessment no long accessible
            (could have been cancelled or marked not for issue)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error

  /assessments/{assessmentId}/summary:
    get:
      tags:
        - Manage Assessments
      summary: Get assessment details in use by frontend in JSON format
      security:
        - oauth:
            - 'assessment:fetch'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being requested, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      responses:
        200:
          description: Energy Performance Assessment
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    oneOf:
                      - $ref: '#/components/schemas/DomesticEnergyAssessmentSummary'
                      - $ref: '#/components/schemas/CommercialEnergyAssessmentSummary'
        404:
          description: Assessment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        400:
          description: Bad request - The assessmentId parameter is badly formatted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        410:
          description: >-
            Assessment no long accessible
            (could have been cancelled or marked not for issue)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error

  /assessments/{assessmentId}/opt-out:
    put:
      tags:
        - Manage Assessments
      summary: Mark an assessment as opted in or out from search and open data publication
      security:
        - oauth:
            - 'admin:opt_out'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being opted in or out'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                optOut:
                  type: boolean
                  example: true
      responses:
        200:
          description: Confirmation of opt-out status update
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: "Your opt out request was successful"
                  meta:
                    type: object
        400:
          description: Opt-out value should be a boolean
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Assessment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /assessments/{assessmentId}/address-id:
    put:
      tags:
        - Manage Assessments
      summary: Update the address ID used to link this assessment with other assessments
      security:
        - oauth:
            - 'admin:update-address-id'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being updated'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                addressId:
                  $ref: '#/components/schemas/AddressId'
      responses:
        200:
          description: Confirmation of successful update
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: "Address ID for assessment 1234-1234-1234-1234-1234 has been updated successfully"
                  meta:
                    type: object
        400:
          description: Bad request - the assessmentId or addressId is badly formatted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Assessment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /dec_summary/{assessmentId}:
    get:
      tags:
        - Manage Assessments
      summary: Get XML from DEC that can be used by AECOM software
      security:
        - oauth:
            - 'dec_summary:fetch'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being requested, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      responses:
        200:
          description: Energy Performance Assessment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
        404:
          description: Assessment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Assessment is not a DEC
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        400:
          description: Bad request - The assessmentId parameter is badly formatted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        410:
          description: >-
            Assessment no long accessible
            (could have been cancelled or marked not for issue)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error

  /assessments/{assessmentId}/status:
    post:
      tags:
        - Manage Assessments
      summary: Update the status of an assessment
      security:
        - oauth:
            - 'assessment:lodge'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being added, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: '#/components/schemas/AssessmentStatus'
      responses:
        200:
          description: Assessment report status updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/AssessmentStatus'
        400:
          description: Bad request - assessmentId parameter was badly formatted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: >-
            Forbidden - the assessment with that assessmentId does not
            belong to your scheme
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Assessment with that assessmentId not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        410:
          description: >-
            Assessment with that assessmentId has already been
            cancelled or marked not for issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error

  /reports/{schemeId}/assessors/status:
      get:
        tags:
          - Manage Assessors
          - Reports
        summary: >-
          Report of assessors who were suspended and struck off on a particular
          day filtered by matching a last name and date of birth to an assessor registered by the queuing scheme
        security:
          - oauth:
              - 'report:assessor:status'
        parameters:
          - in: path
            name: schemeId
            required: true
            description: The ID of the scheme being updated
            schema:
              type: integer
          - in: query
            name: date
            required: true
            description: The date of the report
            schema:
              type: string
              format: date
              example: '2020-01-30'
        responses:
          200:
            description: Report returned successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      type: object
                      properties:
                        assessorStatusEvents:
                          type: array
                          items:
                            $ref: '#/components/schemas/AssessorQualificationChangeEvent'
          403:
            description: Forbidden
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'
          404:
            description: Report not found, likely because the date is in the future
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorResponse'

  /reports/assessors/lookup:
    get:
      tags:
        - Manage Assessors
        - Reports
      summary: >-
        Look up energy assessor records to check all scheme registrations
      security:
        - oauth:
            - 'report:assessor:status'
      parameters:
        - in: query
          name: firstName
          required: true
          description: The first name of the assessor
          schema:
            type: string
            example: 'Richard'
        - in: query
          name: lastName
          required: true
          description: The last name of the assessor
          schema:
            type: string
            format: date
            example: 'James'
        - in: query
          name: dateOfBirth
          required: true
          description: The date of birth of the assessor
          schema:
            type: string
            format: date
            example: '1971-08-18'
      responses:
        200:
          description: >-
            Assessor registration list successfully returned
            (an empty list is returned if there are no matching assessors)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssessorSearchResults'
        400:
          description: Bad request - probably a missing or badly formed parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /greendeal/assessments/{assessmentId}:
    get:
      tags:
        - Green Deal
      summary: 'Get the Green Deal details from the assessment with reference
                {assessmentId}'
      security:
        - oauth:
            - 'greendeal:plans'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being requested, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      responses:
        200:
          description: Green Deal Energy Performance data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      assessment:
                        $ref: '#/components/schemas/AssessmentGreenDealDetails'
        400:
          description: The assessmentId parameter is badly formatted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Assessment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        410:
          description: Gone - Assessment with ID assessmentId exists but has been cancelled/marked not for issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error

  /greendeal/assessments/{assessmentId}/xml:
    get:
      tags:
        - Green Deal
      summary: 'Get the redacted RdSAP XML for the assessment with reference
                {assessmentId}. The response will consist of redacted EPC XML
                that consists of the XML document as originally lodged, with the
                exception of the following redacted elements and their children:
                <Identification>
                <Configuration>
                <Calculation-Software-Name>
                <Calculation-Software-Version>
                <Inspection-Date>
                <Completion-Date>
                <Registration-Date>
                <Status>
                <Restricted-Access>
                <Transaction-Type>
                <Seller-Commission-Report>
                <Energy-Assessor>
                <Address>
                <Related-Party-Disclosure>
                <Insurance-Details>'
      security:
        - oauth:
            - 'greendeal:plans'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being requested, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      responses:
        200:
          description: Green Deal redacted EPC XML data
          content:
            application/xml:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Empty'
        400:
          description: 'The assessmentId parameter is badly formatted, or does
                        not relate to an RdSAP assessment'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Assessment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        410:
          description: 'Gone - Assessment with ID assessmentId exists but has
                        been cancelled/marked not for issue'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error

  /greendeal/rhi/assessments/{assessmentId}/latest:
    get:
      tags:
        - Green Deal
      summary: 'Get the RHI details of the most recent Energy Performance
                Assessment for the address of the assessment with reference
                {assessmentId}'
      security:
        - oauth:
            - 'greendeal:plans'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being requested, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      responses:
        200:
          description: RHI Energy Performance data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      assessment:
                        $ref: '#/components/schemas/AssessmentRHIDetails'
        400:
          description: The assessmentId parameter is badly formatted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Assessment with this ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        410:
          description: Assessment with this ID exists but has been CANCELLED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error

  /greendeal/disclosure/assessments/{assessmentId}/plans:
    post:
      tags:
        - Green Deal
      summary: 'Disclose new live Green Deal plan to appear on EPC with RRN
                {assessmentId}'
      security:
        - oauth:
            - 'greendeal:plans'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being requested, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      requestBody:
        description: Green Deal disclosure data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GreenDealPlan'
      responses:
        201:
          description: Green Deal disclosure successfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GreenDealPlan'
        400:
          description: Problem with Green Deal record request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Energy assessment with RRN assessmentId can not be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Plan with the submitted ID already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        410:
          description: Assessment has been cancelled or not for issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error

  /greendeal/disclosure/plans/{planId}:
    put:
      tags:
        - Green Deal
      summary: 'Update an existing Green Deal plan'
      security:
        - oauth:
            - 'greendeal:plans'
      parameters:
        - in: path
          name: planId
          required: true
          description: 'The ID of the plan being updated'
          schema:
            $ref: '#/components/schemas/GreenDealPlanId'
      requestBody:
        description: Green Deal disclosure data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GreenDealPlan'
      responses:
        200:
          description: Green Deal disclosure successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GreenDealPlan'
        400:
          description: Problem with Green Deal record request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Green Deal plan with ID planId can not be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Identifier in request body doesn't match the planId in the URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error
    delete:
      tags:
        - Green Deal
      summary: 'Delete an existing Green Deal plan'
      security:
        - oauth:
            - 'greendeal:plans'
      parameters:
        - in: path
          name: planId
          required: true
          description: 'The ID of the plan being deleted'
          schema:
            $ref: '#/components/schemas/GreenDealPlanId'
      responses:
        204:
          description: Green Deal disclosure successfully deleted
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Green Deal plan with ID planId can not be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error

  /reports/assessments/region-and-type:
    get:
      tags:
        - Reporting
      summary: 'Gets the data regarding matching postcodes to regions'
      security:
        - oauth:
            - 'reporting:assessment_by_type_and_region'
      parameters:
        - in: query
          name: startDate
          required: true
          description: 'The start date of the range'
          schema:
            type: string
            format: date
            example: '2020-11-01'
        - in: query
          name: endDate
          required: true
          description: 'The end date of the range'
          schema:
            type: string
            format: date
            example: '2020-12-01'
      responses:
        200:
          description: ONS postcodes
          content:
            text/csv: {}
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error

  /reports/assessments/scheme-and-type:
    get:
      tags:
        - Reporting
      summary: >-
        Creates a report of the number of assessments lodged between
        two dates broken down by assessment type and lodging scheme
      security:
        - oauth:
            - 'reporting:assessment_by_scheme_and_type'
      parameters:
        - in: query
          name: startDate
          required: true
          description: 'The start date of the range'
          schema:
            type: string
            format: date
            example: '2020-11-01'
        - in: query
          name: endDate
          required: true
          description: 'The end date of the range'
          schema:
            type: string
            format: date
            example: '2020-12-01'
      responses:
        200:
          description: Report of lodgements by type and scheme
          content:
            text/csv:
              example: >-
                number_of_assessments,scheme_name,type_of_assessment
                1,test scheme,AC-CERT
                1,test scheme,AC-REPORT
                1,test scheme,AC-REPORT+CERT
                1,test scheme,CEPC
                1,test scheme,CEPC+RR
                1,test scheme,CEPC-RR
                1,test scheme,DEC
                1,test scheme,DEC+RR
                1,test scheme,DEC-RR
                1,test scheme,RdSAP
                1,test scheme,SAP
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Server error

components:
  securitySchemes:
    oauth:
      type: oauth2
      description: This API uses OAuth 2 with the client credentials grant flow
      flows:
        clientCredentials:
          tokenUrl: /auth/oauth/token
          scopes:
            'scheme:create': Create a new scheme on the register
            'scheme:list': List schemes on the register
            'scheme:assessor:list': List assessors
            'scheme:assessor:update': Add or Update assessors
            'scheme:assessor:fetch': Get full details of an individual assessor
            'assessment:fetch': Get full details of an individual assessment
            'assessment:lodge': Lodge a new assessment with the register
            'assessment:search': Search the register for an assessment
            'assessor:search': Search the register for an assessor
            'address:search': List addresses that match a given search criteria, along with existing assessments
            'migrate:assessment': Migrate an assessment to the register
            'migrate:assessor': Migrate an assessor to the register
            'migrate:address': Migrate an address to the register
            'report:assessor:status': Get a report of changes to assessors status for a given date
            'greendeal:plans': Access all services necessary for the Green Deal register integration

  schemas:
    # Addresses
    Address:
      type: object
      properties:
        source:
          $ref: '#/components/schemas/AddressSource'
        line1:
          $ref: '#/components/schemas/AddressLine1'
        line2:
          type: string
          example: ''
        line3:
          type: string
          example: ''
        line4:
          type: string
          example: ''
        town:
          $ref: '#/components/schemas/AddressTown'
        postcode:
          $ref: '#/components/schemas/AddressPostcode'

    AddressBody:
      $ref: '#/components/schemas/Address'

    AddressDetail:
      allOf:
        - $ref: '#/components/schemas/Address'
        - type: object
          properties:
            addressId:
              $ref: '#/components/schemas/AddressId'
            existingAssessments:
              type: array
              items:
                type: object
                properties:
                  assessmentId:
                    $ref: '#/components/schemas/AssessmentId'
                  assessmentStatus:
                    $ref: '#/components/schemas/AssessmentStatus'
                  assessmentType:
                    $ref: '#/components/schemas/AssessmentType'

    AddressId:
      type: string
      description: 'An identifier for an address, which is one of:
                    * An OS gazetteer UPRN (prefixed UPRN-)
                    * The reference number of the report this address appears on (prefixed RRN-)'
      example: 'UPRN-716375734512'

    AddressLine1:
      type: string
      example: '2 Marsham Street'

    AddressTown:
      type: string
      example: 'London'

    AddressPostcode:
      type: string
      example: 'SW1P 4JA'

    AddressSource:
      type: string
      enum:
        - GAZETTEER
        - PREVIOUS_ASSESSMENT
      example: 'GAZETTEER'

    AddressSearchResults:
      type: object
      properties:
        data:
          type: object
          properties:
            addresses:
              type: array
              items:
                $ref: '#/components/schemas/AddressDetail'
        meta:
          type: object
          properties:
            filters:
              type: object
              description: >-
                The filters object will contain the search parameters provided
                in the initial request.

    # Assessors
    Assessor:
      type: object
      properties:
        firstName:
          type: string
          example: 'Joe'
        lastName:
          type: string
          example: 'Bloggs'
        middleNames:
          type: string
          example: 'T'
        contactDetails:
          type: object
          properties:
            telephoneNumber:
              type: string
              maxLength: 256
              example: '01632 960375'
            email:
              type: string
              format: email
              example: 'j.t.bloggs@example.com'
        qualifications:
          $ref: '#/components/schemas/AssessorQualifications'
        alsoKnownAs:
          type: string
          example: 'Joey'

    AssessorBody:
      allOf:
        - $ref: '#/components/schemas/Assessor'
        - type: object
          properties:
            dateOfBirth:
              type: string
              format: date
              example: '1980-01-10'
            searchResultsComparisonPostcode:
              $ref: '#/components/schemas/AddressPostcode'
            address:
              $ref: '#/components/schemas/AssessorAddress'
            companyDetails:
              $ref: '#/components/schemas/CompanyDetails'

    AssessorDetail:
      allOf:
        - $ref: '#/components/schemas/Assessor'
        - type: object
          properties:
            assessorSchemeId:
              $ref: '#/components/schemas/AssessorSchemeId'
            registeredBy:
              $ref: '#/components/schemas/Scheme'

    AssessorSearchResults:
      type: object
      properties:
        data:
          type: object
          properties:
            assessors:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/AssessorDetail'

    AssessorSearchByPostcodeResults:
      allOf:
        - $ref: '#/components/schemas/AssessorSearchResults'
        - type: object
          properties:
            data:
              type: object
              properties:
                assessors:
                  type: array
                  items:
                    type: object
                    properties:
                      distanceFromPostcodeInMiles:
                        type: number
                        example: 0.2

    AssessorSchemeId:
      type: string
      example: 'TEST000001'

    AssessorAddress:
      type: object
      properties:
        addressLine1:
          $ref: '#/components/schemas/AddressLine1'
        addressLine2:
          type: string
          example: ''
        addressLine3:
          type: string
          example: ''
        addressLine4:
          type: string
          example: ''
        town:
          $ref: '#/components/schemas/AddressTown'
        postcode:
          $ref: '#/components/schemas/AddressPostcode'

    CompanyDetails:
      type: object
      properties:
        companyRegNo:
          type: string
          example: ''
        companyAddressLine1:
          $ref: '#/components/schemas/AddressLine1'
        companyAddressLine2:
          type: string
          example: ''
        companyAddressLine3:
          type: string
          example: ''
        companyTown:
          $ref: '#/components/schemas/AddressTown'
        companyPostcode:
          $ref: '#/components/schemas/AddressPostcode'
        companyWebsite:
          type: string
          example: ''
        companyTelephoneNumber:
          type: string
          example: ''
        companyEmail:
          type: string
          example: ''
        companyName:
          type: string
          example: ''

    AssessorQualifications:
      type: object
      properties:
        domesticRdSap:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        domesticSap:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        nonDomesticDec:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        nonDomesticNos3:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        nonDomesticNos4:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        nonDomesticNos5:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        nonDomesticSp3:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        nonDomesticCc4:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        gda:
          $ref: '#/components/schemas/AssessorQualificationStatus'

    AssessorQualificationSearchOptions:
      type: string
      enum:
        - domesticRdSap
        - domesticSap
        - nonDomesticDec
        - nonDomesticNos3
        - nonDomesticNos4
        - nonDomesticNos5
        - nonDomesticSp3
        - nonDomesticCc4
        - gda

    AssessorQualificationStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - STRUCKOFF
        - SUSPENDED
      example: 'ACTIVE'

    AssessorQualificationChangeEvent:
      type: object
      properties:
        firstName:
          type: string
          example: "Joe"
        middleNames:
          type: string
          example: "T"
        lastName:
          type: string
          example: "Bloggs"
        assessorSchemeId:
          type: string
          example: "TEST00001"
        dateOfBirth:
          type: string
          example: "1974-12-28"
        qualificationChange:
          type: object
          properties:
            qualificationType:
              type: string
              example: domesticEnergyPerformanceCertificates
            previousStatus:
              $ref: '#/components/schemas/AssessorQualificationStatus'
            newStatus:
              allOf:
                - $ref: '#/components/schemas/AssessorQualificationStatus'
                - example: 'STRUCKOFF'

    AssessorFullName:
      type: string
      example: 'Joe Bloggs'

    FirstName:
      type: string
      example: 'Joe'

    LastName:
      type: string
      example: 'Bloggs'

    DateOfBirth:
      type: string
      format: date

    # Assessments
    AssessmentId:
      type: string
      example: '0000-0000-0000-0000-0000'

    AssessmentStatus:
      type: string
      example: ENTERED
      enum:
        - ENTERED
        - EXPIRED
        - CANCELLED
        - NOT_FOR_ISSUE

    AssessmentType:
      type: string
      example: 'RdSAP'
      enum:
        - RdSAP
        - SAP
        - CEPC
        - CEPC-RR
        - DEC
        - DEC-RR
        - AC-CERT
        - AC-REPORT

    EnergyAssessmentSearchResult:
      type: object
      properties:
        dateOfAssessment:
          type: string
          format: date
          description: The date that the assessor carried out the assessment of the property
        dateOfRegistration:
          type: string
          format: date
          description: The date that the assessment was submitted to the register
        dateOfExpiry:
          type: string
          format: date
          description: The date that the certificate expires
        typeOfAssessment:
          $ref: '#/components/schemas/AssessmentType'
        assessmentId:
          $ref: '#/components/schemas/AssessmentId'
        currentEnergyEfficiencyRating:
          type: integer
          minimum: 1
          maximum: 100
          example: 62
          description: The current energy rating to be submitted to the Register
        currentEnergyEfficiencyBand:
          type: string
          example: 'c'
          description: The band, from a to g, the current Energy Rating falls within
        optOut:
          type: boolean
          example: false
        addressId:
          $ref: '#/components/schemas/AddressId'
        addressLine1:
          $ref: '#/components/schemas/AddressLine1'
        addressLine2:
          type: string
          example: ''
        addressLine3:
          type: string
          example: ''
        addressLine4:
          type: string
          example: ''
        town:
          $ref: '#/components/schemas/AddressTown'
        postcode:
          $ref: '#/components/schemas/AddressPostcode'
        status:
          $ref: '#/components/schemas/AssessmentStatus'


    CommercialEnergyAssessmentSummary:
      $ref: '#/components/schemas/Empty'

    DomesticEnergyAssessmentSummary:
      type: object
      properties:
        typeOfAssessment:
          $ref: '#/components/schemas/AssessmentType'
        assessmentId:
          $ref: '#/components/schemas/AssessmentId'
        dateOfExpiry:
          type: string
          format: date
          description: The date that the certificate expires
        dateOfAssessment:
          type: string
          format: date
          description: The date that the assessor carried out the assessment of the property
        dateOfRegistration:
          type: string
          format: date
          description: The date that the assessment was submitted to the Register
        dateRegistered:
          type: string
          format: date
          description: The date that the assessment was submitted to the Register
        addressLine1:
          $ref: '#/components/schemas/AddressLine1'
        addressLine2:
          type: string
          example: ''
        addressLine3:
          type: string
          example: ''
        addressLine4:
          type: string
          example: ''
        town:
          $ref: '#/components/schemas/AddressTown'
        postcode:
          $ref: '#/components/schemas/AddressPostcode'
        address:
          type: object
          properties:
            addressId:
              $ref: '#/components/schemas/AddressId'
            addressLine1:
              $ref: '#/components/schemas/AddressLine1'
            addressLine2:
              type: string
              example: ''
            addressLine3:
              type: string
              example: ''
            addressLine4:
              type: string
              example: ''
            town:
              $ref: '#/components/schemas/AddressTown'
            postcode:
              $ref: '#/components/schemas/AddressPostcode'
        assessor:
          type: object
          properties:
            firstName:
              type: string
              example: 'Joe'
            lastName:
              type: string
              example: 'Bloggs'
            middleNames:
              type: string
              example: 'T'
            registeredBy:
              type: object
              properties:
                name:
                  type: string
                  example: 'Stroma Certification Ltd'
                schemeId:
                  type: integer
                  example: 5
            schemeAssessorId:
              $ref: '#/components/schemas/AssessorSchemeId'
            contactDetails:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: 'j.t.bloggs@example.com'
                telephoneNumber:
                  type: string
                  maxLength: 256
                  example: '01632 960375'
            searchResultsComparisonPostcode:
              $ref: '#/components/schemas/AddressPostcode'
            address:
              type: object
            companyDetails:
              $ref: '#/components/schemas/CompanyDetails'
            qualifications:
              $ref: '#/components/schemas/AssessorQualifications'
            dateOfBirth:
              type: string
              format: date
              example: '1974-12-28'
        currentCarbonEmission:
          type: number
          description: The current carbon emission of the property
          example: 4.736
        currentEnergyEfficiencyBand:
          type: string
          example: 'c'
          description: The band, from a to g, the current Energy Rating falls within
        currentEnergyEfficiencyRating:
          type: integer
          minimum: 1
          maximum: 100
          example: 62
          description: The current energy rating to be submitted to the Register
        dwellingType:
          type: string
        estimatedEnergyCost:
          type: string
          example: '1307.00'
        mainFuelType:
          type: string
          example: '28'
        heatDemand:
          type: object
          properties:
            currentSpaceHeatingDemand:
              type: number
              example: 456.45
            currentWaterHeatingDemand:
              type: number
              example: 325.33
            impactOfLoftInsulation:
              type: integer
              example: -453
            impactOfCavityInsulation:
              type: integer
              example: -84
            impactOfSolidWallInsulation:
              type: integer
              example: -21
        totalFloorArea:
          type: number
          example: 120.55
        potentialCarbonEmission:
          type: number
          description: The potential carbon emission of the propety
          example: 2.839
        potentialEnergyEfficiencyBand:
          type: string
          example: 'a'
          description: The band, from a to g, the potential Energy Rating falls within
        potentialEnergyEfficiencyRating:
          type: integer
          minimum: 1
          maximum: 100
          description: The potential energy rating to be submitted, must be equal to or larger than currentEnergyEfficiencyRating
        primaryEnergyUse:
          type: number
          example: 598
        propertySummary:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/PropertySummary'
        recommendedImprovements:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/DomesticRecommendationWithoutCode'
              - $ref: '#/components/schemas/DomesticRecommendationWithCode'
        lzcEnergySources:
          type: array
          items:
            type: integer
            example: 11
          nullable: true
          description: Low and zero carbon energy sources for the property
          example: [11]
        addendum:
          anyOf:
            - $ref: '#/components/schemas/Addendum'
          nullable: true
          description: Additional information about the property

    PropertySummary:
      type: object
      properties:
        name:
          type: string
          example: "Walls"
          description: "The name of the feature of the property"
        description:
          type: string
          example: "Solid brick, as built, no insulation (assumed)"
        energyEfficiencyRating:
          type: number
          example: 2
        environmentalEfficiencyRating:
          type: number
          example: 0

    DomesticRecommendationWithoutCode:
      type: object
      properties:
        sequence:
          type: number
          example: 0
          description: "The order in which this recommendation should be shown"
        indicativeCost:
          type: string
          example: "£200 - £4,000"
        typicalSaving:
          type: number
          example: 400.21
        improvementCategory:
          type: string
        improvementType:
          type: string
        improvementTitle:
          type: string
        improvementDescription:
          type: string
        energyPerformanceRating:
          type: string
          description: "The estimated energy performance rating once the improvement has been carried out"
          example: "C"
        environmentalImpactRating:
          type: string
          description: "The estimated environmental impact rating once the improvement has been carried out"
        greenDealCategoryCode:
          type: string

    DomesticRecommendationWithCode:
      type: object
      properties:
        sequence:
          type: number
          example: 1
          description: "The order in which this recommendation should be shown"
        improvementCode:
          type: string
          example: "1"
        indicativeCost:
          type: string
          example: "£200 - £4,000"
        typicalSaving:
          type: number
          example: 400.21
        improvementCategory:
          type: string
        improvementType:
          type: string
        energyPerformanceRating:
          type: string
          description: "The estimated energy performance rating once the improvement has been carried out"
          example: "C"
        environmentalImpactRating:
          type: string
          description: "The estimated environmental impact rating once the improvement has been carried out"
        greenDealCategoryCode:
          type: string

    # Green Deal
    AssessmentGreenDealDetails:
      type: object
      properties:
        typeOfAssessment:
          type: string
          enum: [SAP, RdSAP]
        address:
          $ref: '#/components/schemas/Address'
        addressIdentifiers:
          description: 'List of address identifiers associated with this assessment - these may include:
                        * OS gazetteer UPRNS (prefixed UPRN-)
                        * Legacy reference numbers from the old register system (prefixed LPRN-)
                        * Reference numbers for reports for this address (prefixed RRN-)'
          type: array
          items:
            $ref: '#/components/schemas/AddressId'
          example: ["UPRN-716375734512", "LPRN-1234567890", "RRN-1234-1234-1234-1234-1234"]
        countryCode:
          type: string
          example: 'EAW'
        inspectionDate:
          type: string
          format: date
          example: '2020-02-29'
        lodgementDate:
          type: string
          format: date
          example: '2020-02-29'
        isLatestAssessmentForAddress:
          type: boolean
          example: true
        status:
          $ref: '#/components/schemas/AssessmentStatus'
        mainFuelType:
          type: string
          example: 'Natural Gas'
        secondaryFuelType:
          type: string
          example: 'Grid Supplied Electricity'
        waterHeatingFuel:
          type: string
          example: 'Smokeless Fuel (inc Coke)'

    AssessmentRHIDetails:
      type: object
      properties:
        epcRrn:
          $ref: '#/components/schemas/AssessmentId'
        assessorName:
          $ref: '#/components/schemas/AssessorFullName'
        reportType:
          type: string
          example: 'Energy Performance Certificate'
        inspectionDate:
          type: string
          format: date
          example: '2020-01-30'
        lodgementDate:
          type: string
          format: date
          example: '2020-02-29'
        dwellingType:
          type: string
          example: 'Top-floor flat'
        postcode:
          $ref: '#/components/schemas/AddressPostcode'
        propertyAgeBand:
          type: string
          example: 'D'
        tenure:
          type: string
          example: 'Owner-occupied'
        totalFloorArea:
          type: string
          example: '123.5 square metres'
        cavityWallInsulation:
          type: boolean
          example: false
        loftInsulation:
          type: boolean
          example: true
        spaceHeating:
          type: number
          example: 9901.00
        waterHeating:
          type: number
          example: 2654.00
        secondaryHeating:
          type: string
          example: 'Electric bar heater'
        energyEfficiency:
          $ref: '#/components/schemas/RHIEnergyEfficiency'

    RHIEnergyEfficiency:
      type: object
      properties:
        currentRating:
          type: number
          example: 64
        currentBand:
          type: string
          example: 'D'
        potentialRating:
          type: number
          example: 75
        potentialBand:
          type: string
          example: 'C'

    GreenDealPlanId:
      description: 'Green Deal plan ID - created by the Central Charge Database
                    (GDCC) when the plan is set up'
      type: string
      maxLength: 12
      example: 'ABC123456DEF'

    GreenDealPlan:
      type: object
      properties:
        greenDealPlanId:
          $ref: '#/components/schemas/GreenDealPlanId'
        startDate:
          description: The date the plan went live
          type: string
          format: date
          example: '2020-01-30'
        endDate:
          description: The date the plan is expected to end
          type: string
          format: date
          example: '2030-02-28'
        providerDetails:
          $ref: '#/components/schemas/GreenDealProvider'
        interest:
          $ref: '#/components/schemas/GreenDealInterest'
        chargeUplift:
          $ref: '#/components/schemas/GreenDealChargeUplift'
        ccaRegulated:
          description: 'Whether the Green Deal plan is regulated under the
                        Consumer Credit Act'
          type: boolean
          example: true
        structureChanged:
          description: 'Whether the provider knows or has reasonable cause to
                        believe that an alteration has been made to the Green
                        Deal property which, had it existed when the estimated
                        first year savings were calculated, would have affected
                        that calculation materially'
          type: boolean
          example: false
        measuresRemoved:
          description: 'Whether the provider knows or has reasonable cause to
                        believe that an improvement installed at the Green Deal
                        property under a green deal plan has been removed from
                        the property before the end of the improvement-specific
                        payment period'
          type: boolean
          example: false
        measures:
          type: array
          items:
            $ref: '#/components/schemas/GreenDealMeasure'
        charges:
          type: array
          items:
            $ref: '#/components/schemas/GreenDealCharge'
        savings:
          type: array
          items:
            $ref: '#/components/schemas/GreenDealSaving'

    GreenDealProvider:
      type: object
      description: Details relating to the provider of the plan
      properties:
        name:
          description: 'Name of the provider organisation responsible for the
                        Green Deal plan'
          type: string
          maxLength: 400
          example: 'The Bank'
        telephone:
          description: 'Phone number of the provider organisation responsible
                        for the Green Deal plan'
          type: string
          maxLength: 100
          example: '0800 0000000'
        email:
          description: 'Email address of the provider organisation responsible
                        for the Green Deal plan'
          type: string
          maxLength: 100
          example: 'lender@example.com'

    GreenDealInterest:
      type: object
      properties:
        rate:
          description: 'The interest rate (APR) on the Green Deal finance taken
                        out for the Green Deal plan'
          type: number
          minimum: 0
          maximum: 10000
          example: 12.3
        fixed:
          description: 'Whether the interest rate on the Green Deal plan is
                        fixed over the lifetime of the plan'
          type: boolean
          example: true

    GreenDealChargeUplift:
      type: object
      properties:
        amount:
          description: 'The percentage uplift in the Green Deal daily charge,
                        where applicable, otherwise zero'
          type: number
          minimum: 0
          maximum: 1000
          example: 1.25
        date:
          description: 'The date when the Green Deal daily charge uplift takes
                        effect, where an annual interest uplift is included as a
                        term of the Green Deal plan'
          type: string
          format: date
          example: '2025-03-29'

    GreenDealMeasure:
      type: object
      properties:
        sequence:
          type: integer
          example: 0
        measureType:
          description: 'The measure type of the specific measure installed under
                        the Green Deal plan'
          type: string
          example: 'Loft insulation'
        product:
          description: 'The product name of the specific measure installed under
                        the Green Deal plan'
          type: string
          example: 'WarmHome lagging stuff (TM)'
        repaidDate:
          description: 'Date the measure will be paid off under the Green Deal
                        plan payment schedule'
          type: string
          format: date
          example: '2025-03-29'

    GreenDealCharge:
      type: object
      properties:
        sequence:
          type: integer
          example: 0
        startDate:
          description: 'The start date at which the specified daily charge
                        starts taking effect'
          type: string
          format: date
          example: '2020-03-29'
        endDate:
          description: 'The end date at which the specified daily charge stops
                        taking effect'
          type: string
          format: date
          example: '2030-03-29'
        dailyCharge:
          description: 'The daily amount the customer will be paying through
                        their electricity bill'
          type: number
          minimum: 0
          maximum: 10000
          example: 0.34

    GreenDealSaving:
      type: object
      properties:
        sequence:
          type: integer
          example: 0
        fuelCode:
          description: 'Code which indicates the type of heating fuel'
          type: string
          example: '3'
          enum: ["3" ,"5" ,"6" ,"7" ,"8" ,"9" ,"15" ,"16" ,"17" ,"18" ,"19" ,"26" ,"27" ,"28" ,"33" ,"34" ,"35" ,"36" ,"37" ,"38" ,"39" ,"40" ,"41" ,"42" ,"43" ,"44" ,"45"]
        fuelSaving:
          description: 'Total kWh saving for the fuel (negative if increase),
                        allowing for in-use factors'
          type: number
          minimum: -10000000
          maximum: 10000000
        standingChargeFraction:
          description: 'Fraction of standing charge for the fuel applicable to
                        the saving, negative if standing charge applies after
                        improvements but not before, positive if standing
                        charge applies before improvements but not after,
                        zero otherwise'
          type: number
          minimum: -1
          maximum: 1
          example: -0.3

    Addendum:
      type: object
      properties:
        addendumNumber:
          type: array
          items:
            type: integer
            example: 8
          nullable: true
          example: [8]
        cavityFillRecommended:
          type: boolean
          example: true
        stoneWalls:
          type: boolean
          example: true
        systemBuild:
          type: boolean
          example: true
        accessIssues:
          type: boolean
          example: true
        highExposure:
          type: boolean
          example: true
        narrowCavities:
          type: boolean
          example: true

    # Schemes
    Scheme:
      allOf:
        - $ref: '#/components/schemas/SchemeBody'
        - type: object
          properties:
            schemeId:
              type: string
              example: '432'

    SchemeBody:
      type: object
      properties:
        name:
          type: string
          example: 'EPCs 4 U'
        active:
          type: boolean
          example: true
          description: 'Whether or not the scheme is currently active'

    # General
    Empty:
      type: object

    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
                example: "NOT_FOUND"
              title:
                type: string
                example: "The thing you are looking for is not here"

  links: {}
  callbacks: {}
