openapi: 3.0.0

info:
  title: Energy Performance of Buildings Register API
  description: Public API for EPBR integrations
  contact:
    name: DLUHC Digital helpdesk (prefix email subject with "EPB")
    email: dluhc.digital-services@levellingup.gov.uk
  version: 1.2.2

servers:
  - url: 'https://api.epb-integration.digital.communities.gov.uk/api'
    description: Integration Service
  - url: 'https://api.epb-staging.digital.communities.gov.uk/api'
    description: Staging Service
  - url: 'https://api.epb.digital.communities.gov.uk/api'
    description: Production Service

tags:
  - name: Search
    description: Search the register given filtering data
  - name: Manage Assessors
    description: Manage assessors for a given Scheme
  - name: Manage Assessments
    description: Manage EPCs, DECs, RRs and AC-REPORTs
  - name: Manage Schemes
    description: Operations for managing schemes in the register
  - name: Green Deal
    description: Endpoints used by the Green Deal register integration, including Renewable Heat Initiative
  - name: Boiler Upgrade Scheme
    description: Endpoints used by the Boiler Upgrade Scheme
  - name: Home Energy Retrofit Advice
    description: Endpoints used by the Home Energy Retrofit Advice service
  - name: Home Energy Retrofit Funding
    description: Endpoints used by the Home Energy Retrofit Funding service
  - name: Heat Pump Check
    description: Endpoints used by the Heat Pump Check service
  - name: Warm Home Discount
    description: Endpoints used by the Warm Home Discount service
  - name: Reports
    description: Endpoints providing reports, i.e. specific data views of operational interest
  - name: Service Performance
    description: Endpoints used in providing the Service Performance page

paths:
  /schemes:
    get:
      tags:
        - Manage Schemes
      summary: Get a list of all energy assessment schemes in the register
      description: List the energy assessment schemes
      operationId: list-schemes
      security:
        - oauth:
            - 'scheme:list'
      parameters: []
      responses:
        '200':
          description: List of all schemes
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      schemes:
                        type: array
                        items:
                          $ref: '#/components/schemas/Scheme'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Manage Schemes
      summary: Add a new energy assessment scheme to the register
      description: Add an energy assessment scheme
      operationId: add-scheme
      security:
        - oauth:
            - 'scheme:create'
      requestBody:
        description: The scheme to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemeBody'
      responses:
        '201':
          description: Scheme successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Scheme'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Scheme already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                          example: SCHEME_ALREADY_EXISTS
                        title:
                          type: string
                          example: >-
                            A scheme with this name already exists in the
                            register
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /schemes/{schemeId}:
    put:
      tags:
        - Manage Schemes
      description: Update a scheme
      operationId: update-scheme
      responses:
        '204':
          description: Update successful
        '404':
          description: Scheme not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      parameters:
        - in: path
          name: schemeId
          required: true
          description: The ID of the scheme being updated
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemeBody'

  /schemes/{schemeId}/assessors:
    get:
      tags:
        - Manage Assessors
      summary: List a summary of assessors belonging to a scheme
      description: List assessors for a scheme
      operationId: list-scheme-assessors
      security:
        - oauth:
            - 'scheme:assessor:list'
      parameters:
        - in: path
          name: schemeId
          required: true
          description: ID of the scheme
          schema:
            type: integer
      responses:
        '200':
          description: List of assessors for a scheme
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      assessors:
                        type: array
                        items:
                          $ref: '#/components/schemas/AssessorBody'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Scheme not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /schemes/{schemeId}/assessors/{schemeAssessorId}:
    get:
      tags:
        - Manage Assessors
      summary: Get all details for an individual assessor registration
      description: Get details for an assessor on a scheme
      operationId: get-scheme-assessor
      security:
        - oauth:
            - 'scheme:assessor:fetch'
      parameters:
        - in: path
          name: schemeId
          required: true
          description: ID of the registering scheme
          schema:
            type: integer
        - in: path
          name: schemeAssessorId
          required: true
          description: The Assessor ID assigned by the registering scheme
          schema:
            $ref: '#/components/schemas/AssessorSchemeId'
      responses:
        '200':
          description: Assessor found
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssessorBody'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Assessor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Manage Assessors
      summary: >-
        Register a new assessor to associate them with your scheme,
        or update details of an assessor already on your scheme.
      description: Update or add an assessor
      operationId: upsert-assessor
      security:
        - oauth:
            - 'scheme:assessor:update'
      parameters:
        - in: path
          name: schemeId
          required: true
          description: ID of the registering scheme
          schema:
            type: integer
        - in: path
          name: schemeAssessorId
          required: true
          description: The Assessor ID assigned by the registering scheme
          schema:
            $ref: '#/components/schemas/AssessorSchemeId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssessorBody'
      responses:
        '200':
          description: Existing assessor updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssessorBody'
        '201':
          description: New assessor successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AssessorBody'
        '400':
          description: Problem with assessor registration record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Assessor already exists on a different scheme
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Assessor data is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /assessors:
    get:
      tags:
        - Search
        - Manage Assessors
      summary: 'Search for an assessor by postcode or full name
                Clients with scope assessor:search can search by
                  EITHER:
                  - a postcode (with scope assessor:search) and optional qualification
                  OR
                  - full name (with scope assessor:search) and optional qualification type (domestic or non-domestic)

                Clients with scope scheme:assessor:fetch can search by
                  - firstName AND lastName AND dateOfBirth'
      description: Search for an assessor
      operationId: search-assessors
      security:
        - oauth:
            - 'assessor:search'
            - 'scheme:assessor:fetch'
      parameters:
        - in: query
          name: postcode
          description: A postcode to search from for an assessor
          schema:
            $ref: '#/components/schemas/AddressPostcode'
        - in: query
          name: name
          description: The name of the assessor
          schema:
            $ref: '#/components/schemas/AssessorFullName'
        - in: query
          name: qualification
          description: Only show assessors who have this specific qualification
          schema:
            $ref: '#/components/schemas/AssessorQualificationSearchOptions'
        - in: query
          name: qualificationType
          description: Only show assessors who have this type of qualification
          schema:
            $ref: '#/components/schemas/AssessorQualificationTypeSearchOptions'
        - in: query
          name: firstName
          description: The first name of the assessor
          schema:
            $ref: '#/components/schemas/FirstName'
        - in: query
          name: lastName
          description: The last name of the assessor
          schema:
            $ref: '#/components/schemas/LastName'
        - in: query
          name: dateOfBirth
          description: The date of birth of the assessor
          schema:
            $ref: '#/components/schemas/DateOfBirth'
      responses:
        '200':
          description: List of assessors matching the search criteria
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/AssessorSearchResults'
                  - $ref: '#/components/schemas/AssessorSearchByPostcodeResults'
                  - $ref: '#/components/schemas/AssessorBody'
        '400':
          description: Invalid query - probably a missing parameter or disallowed combination of parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /search/addresses:
    get:
      tags:
        - Search
      summary: 'Search for an address by (optional) type and
                EITHER:
                - a postcode (with optional building name or number)
                OR
                - a street AND town
                OR
                - a building reference number (UPRN or RRN)'
      description: Search for usable addresses for an assessment
      operationId: search-addresses
      security:
        - oauth:
            - 'search:addresses'
      parameters:
        - in: query
          name: postcode
          description: The postcode of the address being searched for
          schema:
            $ref: '#/components/schemas/AddressPostcode'
        - in: query
          name: buildingNameNumber
          description: The building name or number being searched for
          schema:
            type: string
          example: '47'
        - in: query
          name: street
          description: The street of the address being searched for
          schema:
            type: string
          example: 'High Road'
        - in: query
          name: town
          description: The city or town of the address being searched for
          schema:
            $ref: '#/components/schemas/AddressTown'
          example: 'Woking'
        - in: query
          name: addressId
          description: A known UPRN or RRN to fetch a single address
          schema:
            type: string
          example: 'UPRN-716375734512'
        - in: query
          name: addressType
          description: Domestic or commercial address
          schema:
            type: string
            enum:
              - DOMESTIC
              - COMMERCIAL
      responses:
        '200':
          description: Address search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressSearchResults'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /assessments/search:
    get:
      tags:
        - Search
        - Manage Assessments
      summary: Search for assessments
      description: 'Search for an assessment by
                    EITHER:
                     - a postcode AND assessment type
                    OR
                     - a street AND town AND assessment type
                    OR
                     - an assessment reference number (RRN)'
      operationId: search-assessments
      security:
        - oauth:
            - 'assessment:search'
      parameters:
        - in: query
          name: postcode
          description: The postcode of the address being searched for
          schema:
            $ref: '#/components/schemas/AddressPostcode'
          example: 'FL23 4JA'
        - in: query
          name: assessmentTypes
          description: The types of assessment being searched for, separated by commas
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AssessmentType'
          explode: false
          example: 'RdSAP,SAP'
        - in: query
          name: street
          description: The street of the assessment being searched for
          schema:
            type: string
          example: 'High Road'
        - in: query
          name: town
          description: The city or town of the assessment being searched for
          schema:
            $ref: '#/components/schemas/AddressTown'
          example: 'Woking'
        - in: query
          name: assessmentId
          description: The RRN of the assessment being searched for
          schema:
            $ref: '#/components/schemas/AssessmentId'
          example: '1234-2345-3456-4567-6789'
      responses:
        '200':
          description: Assessment search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      assessments:
                        type: array
                        items:
                          $ref: '#/components/schemas/EnergyAssessmentSearchResult'
        '400':
          description: Bad request - missing or malformed parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /assessments/domestic-epcs/search:
    get:
      tags:
        - Search
        - Home Energy Retrofit Advice
        - Heat Pump Check
        - Warm Home Discount
      summary: Search for domestic EPCs by address
      description: 'Search for an assessment by postcode and optional building
                    name/number. If building name/number is not supplied then
                    all domestic EPC matches for the postcode are returned'
      operationId: search-domestic-epcs
      security:
        - oauth:
            - 'assessment:domestic-epc:search'
      parameters:
        - in: query
          name: postcode
          description: The postcode of the address being searched for
          required: true
          schema:
            $ref: '#/components/schemas/AddressPostcode'
          example: 'FL23 4JA'
        - in: query
          name: buildingNameOrNumber
          description: The name or number for the building (optional)
          required: false
          schema:
            $ref: '#/components/schemas/AddressBuildingNameOrNumber'
          example: '22 Acacia Avenue'
      responses:
        '200':
          description: Domestic EPC search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      assessments:
                        type: array
                        items:
                          $ref: '#/components/schemas/DomesticEPCsSearchResult'
              example: [
                {
                  "epcRrn": "1111-1111-1111-1111-1111",
                  "address": {
                    "addressLine1": "11 Acacia Avenue",
                    "addressLine2": "Upper Wellgood",
                    "addressLine3": "",
                    "addressLine4": "",
                    "town": "Fulchester",
                    "postcode": "FL23 4JA"
                  }
                },
                {
                  "epcRrn": "2222-2222-2222-2222-2222",
                  "address": {
                    "addressLine1": "22 Acacia Avenue",
                    "addressLine2": "Upper Wellgood",
                    "addressLine3": "",
                    "addressLine4": "",
                    "town": "Fulchester",
                    "postcode": "FL23 4JA"
                  }
                }
              ]
        '400':
          description: 'Bad request - most likely an invalid postcode'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: No matching EPCs found for the given query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: 503

  /assessments:
    post:
      tags:
        - Manage Assessments
      summary: Lodge a new assessment or migrate an existing assessment
      description: 'Single endpoint for POSTing all new lodgements.
                    It will accept as XML payload:
                    * A single <Report> for a domestic RdSAP assessment
                    * A single <Report> for a domestic SAP assessment
                    * Non-domestic EPC and Recommendation report in a single XML
                      payload with two <Report> elements
                    * Air Conditioning certificate and AC-report in a single XML
                      payload with two <Report> elements
                    * A single <Report> for DEC
                    * A single <Report> for DEC recommendation report
                    * DEC and DEC-RR in a single XML payload with two <Report>
                      elements'
      operationId: lodge-assessment
      security:
        - oauth:
            - 'assessment:lodge'
            - 'migrate:assessment'
      parameters:
        - in: query
          name: override
          description: 'Only set to true after assessor has manually confirmed
                        desire to override lodgement rules. This action will be
                        logged.'
          schema:
            type: boolean
          example: true
        - in: query
          name: migrated
          description: 'For use by EPB register only. Set to true if migrating a
                        previous lodgement.
                        Requires migrate:assessment scope in client credentials.'
          schema:
            type: boolean
          example: true
      requestBody:
        content:
          application/xml+RdSAP-Schema-20.0.0:
            schema:
              $ref: '#/components/schemas/Empty'
          application/xml+SAP-Schema-18.0.0:
            schema:
              $ref: '#/components/schemas/Empty'
          application/xml+RdSAP-Schema-NI-20.0.0:
            schema:
              $ref: '#/components/schemas/Empty'
          application/xml+SAP-Schema-NI-18.0.0:
            schema:
              $ref: '#/components/schemas/Empty'
          application/xml+CEPC-8.0.0:
            schema:
              $ref: '#/components/schemas/Empty'
          application/xml+CEPC-NI-8.0.0:
            schema:
              $ref: '#/components/schemas/Empty'
      responses:
        '201':
          description: New assessment(s) successfully lodged
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      assessments:
                        type: array
                        items:
                          type: string
                          properties:
                            assessmentId:
                              $ref: '#/components/schemas/AssessmentId'
                        example: ["9876-9876-9876-9876-9876", "8765-8765-8765-8765-8765"]
                  meta:
                    type: object
                    properties:
                      links:
                        type: object
                        properties:
                          assessments:
                            type: array
                            items:
                              type: string
                            example: ["/api/assessments/9876-9876-9876-9876-9876", "/api/assessments/8765-8765-8765-8765-8765"]
        '400':
          description: Bad request - assessment violates lodgement rules. Re-POST to the override link to lodge anyway.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                          example: "FLOOR_AREA_LESS_THAN_ZERO"
                        title:
                          type: string
                          example: "Floor-Area must be greater than zero"
                  meta:
                    type: object
                    properties:
                      links:
                        type: object
                        properties:
                          override:
                            type: string
                            example: "/assessments?override=true"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Assessment with that assessmentId already exists - retry with different RRN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /assessments/{assessmentId}:
    get:
      tags:
        - Manage Assessments
      summary: Get an Energy Performance Assessment
      description: Get an assessment's XML
      operationId: get-assessment-xml
      security:
        - oauth:
            - 'assessment:fetch'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being requested, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      responses:
        '200':
          description: Energy Performance Assessment
          content:
            application/xml:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Empty'
        '400':
          description: Bad request - The assessmentId parameter is badly formatted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Assessment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '410':
          description: >-
            Assessment no long accessible
            (could have been cancelled or marked not for issue)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /assessments/{assessmentId}/summary:
    get:
      tags:
        - Manage Assessments
      summary: Get assessment details in use by frontend in JSON format
      description: Get summary of assessment for use by frontend
      operationId: get-assessment-summary
      security:
        - oauth:
            - 'assessment:fetch'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being requested, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      responses:
        '200':
          description: Energy Performance Assessment
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    oneOf:
                      - $ref: '#/components/schemas/DomesticEnergyAssessmentSummary'
                      - $ref: '#/components/schemas/CommercialEnergyAssessmentSummary'
        '404':
          description: Assessment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request - The assessmentId parameter is badly formatted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '410':
          description: >-
            Assessment no long accessible
            (could have been cancelled or marked not for issue)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /assessments/{assessmentId}/meta-data:
    get:
      tags:
        - Manage Assessments
      summary: Get assessment metadata attributes used by data-warehouse in JSON format
      description: Get assessment metadata
      operationId: get-assessment-metadata
      security:
        - oauth:
            - 'assessmentmetadata:fetch'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being requested, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      responses:
        '200':
          description: Energy Performance Assessment
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/EnergyAssessmentMetadata'
        '404':
          description: Assessment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request - The assessmentId parameter is badly formatted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /assessments/{assessmentId}/opt-out:
    put:
      tags:
        - Manage Assessments
      summary: Mark an assessment as opted in or out from search and open data publication
      description: Update opt-out status of an assessment
      operationId: update-assessment-optout-status
      security:
        - oauth:
            - 'admin:opt_out'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being opted in or out'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                optOut:
                  type: boolean
                  example: true
      responses:
        '200':
          description: Confirmation of opt-out status update
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: "Your opt out request was successful"
                  meta:
                    type: object
        '400':
          description: Opt-out value should be a boolean
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Assessment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /assessments/{assessmentId}/address-id:
    put:
      tags:
        - Manage Assessments
      summary: Update the address ID used to link this assessment with other assessments
      description: Update the canonical address ID for an assessment
      operationId: update-canonical-address-id
      security:
        - oauth:
            - 'admin:update-address-id'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being updated'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                addressId:
                  $ref: '#/components/schemas/AddressId'
      responses:
        '200':
          description: Confirmation of successful update
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: "Address ID for assessment 1234-1234-1234-1234-1234 has been updated successfully"
                  meta:
                    type: object
        '400':
          description: Bad request - the assessmentId or addressId is badly formatted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Assessment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /dec_summary/{assessmentId}:
    get:
      tags:
        - Manage Assessments
      summary: Get XML from DEC that can be used by AECOM software
      description: Get the XML for a DEC
      operationId: get-dec-xml
      security:
        - oauth:
            - 'dec_summary:fetch'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being requested, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      responses:
        '200':
          description: Energy Performance Assessment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Empty'
        '404':
          description: Assessment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Assessment is not a DEC
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Bad request - The assessmentId parameter is badly formatted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '410':
          description: >-
            Assessment no long accessible
            (could have been cancelled or marked not for issue)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /assessments/{assessmentId}/status:
    post:
      tags:
        - Manage Assessments
      summary: Update the status of an assessment
      description: Update assessment status
      operationId: update-assessment-status
      security:
        - oauth:
            - 'assessment:lodge'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being added, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: '#/components/schemas/AssessmentStatus'
      responses:
        '200':
          description: Assessment report status updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      status:
                        $ref: '#/components/schemas/AssessmentStatus'
        '400':
          description: Bad request - assessmentId parameter was badly formatted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: >-
            Forbidden - the assessment with that assessmentId does not
            belong to your scheme
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Assessment with that assessmentId not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '410':
          description: >-
            Assessment with that assessmentId has already been
            cancelled or marked not for issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Request data is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /reports/{schemeId}/assessors/status:
    get:
      tags:
        - Manage Assessors
        - Reports
      summary: >-
        Report of assessors who were suspended and struck off on a particular
        day filtered by matching a last name and date of birth to an assessor registered by the queuing scheme
      description: Get report of assessors who were struck off on a particular day
      operationId: get-assessor-status-report
      security:
        - oauth:
            - 'report:assessor:status'
      parameters:
        - in: path
          name: schemeId
          required: true
          description: The ID of the scheme being updated
          schema:
            type: integer
        - in: query
          name: date
          required: true
          description: The date of the report
          schema:
            type: string
            format: date
            example: '2020-01-30'
      responses:
        '200':
          description: Report returned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      assessorStatusEvents:
                        type: array
                        items:
                          $ref: '#/components/schemas/AssessorQualificationChangeEvent'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Report not found, likely because the date is in the future
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /bus/assessments/latest/search:
    get:
      tags:
        - Boiler Upgrade Scheme
      summary: Search for assessments exposing details for the Boiler Upgrade Scheme (BUS)
      description: 'Search for an assessment by
                    EITHER
                     - a postcode AND building name/ number
                    OR
                     - an address ID (UPRN)
                    OR
                     - an assessment reference number (RRN)
                     in each case returning the BUS details of the most recent
                     Energy Performance Certificate (EPC) for the property'
      operationId: bus-search-latest-assessments
      security:
        - oauth:
            - 'bus:assessment:search'
      parameters:
        - in: query
          name: postcode
          description: The postcode of the address being searched for
          schema:
            $ref: '#/components/schemas/AddressPostcode'
          example: 'FL23 4JA'
        - in: query
          name: buildingNameOrNumber
          description: The name or number for the building
          schema:
            $ref: '#/components/schemas/AddressBuildingNameOrNumber'
          example: '22 Acacia Avenue'
        - in: query
          name: uprn
          description: The UPRN of the property being searched for
          schema:
            $ref: '#/components/schemas/AddressUprn'
          example: 'UPRN-000456789012'
        - in: query
          name: rrn
          description: The RRN of the assessment being searched for
          schema:
            $ref: '#/components/schemas/AssessmentId'
          example: '1234-2345-3456-4567-6789'
      responses:
        '200':
          description: BUS Energy Performance data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      assessment:
                        $ref: '#/components/schemas/AssessmentBUSDetails'
        '300':
          description: Multiple sets of BUS details were matched for the given query parameters. Response contains RRNs for which BUS details can be fetched individually.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultipleBUSMatchesList'
        '303':
          description: 'Redirect to the URL for the latest assessment in the case that the assessment pertaining to the requested RRN has been superseded'
          headers:
            Location:
              schema:
                type: "string"
        '400':
          description: 'Badly formed request - error response message will contain the details.
                        This could be
                        * Bad combination of query parameters
                        * Invalid postcode
                        * Badly formed address ID
                        * Badly formed assessment ID
                        * No valid query parameters'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: No matching EPCs found for the given query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /retrofit-advice/assessments/{assessmentId}:
    get:
      tags:
        - Home Energy Retrofit Advice
      summary: 'Get the Home Energy Retrofit Advice details from the domestic EPC
                with reference {assessmentId}'
      description: Get domestic EPC details for the supplied RRN
      operationId: get-assessment-retrofit-advice
      security:
        - oauth:
            - 'retrofit-advice:assessment:fetch'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID (RRN) of the assessment being requested'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      responses:
        '200':
          description: Domestic EPC data for the Home Energy Retrofit Advice service
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      assessment:
                        $ref: '#/components/schemas/RetrofitAdviceAssessmentDetails'
        '400':
          description: The assessmentId parameter is badly formatted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Domestic EPC with this RRN not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /retrofit-funding/assessments:
    get:
      tags:
        - Home Energy Retrofit Funding
      summary: 'Get the Home Energy Retrofit Funding details by property UPRN'
      description: Get latest domestic EPC details for the supplied UPRN
      operationId: get-assessment-retrofit-funding
      security:
        - oauth:
            - 'retrofit-funding:assessment:fetch'
      parameters:
        - in: query
          name: uprn
          required: true
          description: 'The 12-digit (left zero-padded) UPRN of the property whose EPC is being requested'
          schema:
            $ref: '#/components/schemas/LPaddedUprn'
      responses:
        '200':
          description: Domestic EPC data for the Home Energy Retrofit Funding service
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      assessment:
                        $ref: '#/components/schemas/RetrofitFundingAssessmentDetails'
        '400':
          description: The UPRN parameter is badly formatted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: No domestic EPCs found for this UPRN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /heat-pump-check/assessments/{assessmentId}:
    get:
      tags:
        - Heat Pump Check
      summary: 'Get the Heat Pump Check details from the domestic EPC
                with reference {assessmentId}'
      description: Get domestic EPC details for the supplied RRN
      operationId: get-assessment-heat-pump-check
      security:
        - oauth:
            - 'heat-pump-check:assessment:fetch'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID (RRN) of the assessment being requested'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      responses:
        '200':
          description: Domestic EPC data for the Heat Pump Check service
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      assessment:
                        $ref: '#/components/schemas/HeatPumpCheckAssessmentDetails'
        '400':
          description: The assessmentId parameter is badly formatted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Domestic EPC with this RRN not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /warm-home-discount/assessments/{assessmentId}:
    get:
      tags:
        - Warm Home Discount
      summary: 'Get the Warm Home Discount details from the domestic EPC
                with reference {assessmentId}'
      description: Get domestic EPC details for the supplied RRN
      operationId: get-assessment-warm-home-discount
      security:
        - oauth:
            - 'warm-home-discount:assessment:fetch'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID (RRN) of the assessment being requested'
          schema:
            $ref: '#/components/schemas/AssessmentId'
        - in: query
          name: includeTypeOfProperty
          required: false
          description: 'Whether the response should include the additional typeOfProperty key'
          schema:
            type: boolean
            example: true
      responses:
        '200':
          description: Domestic EPC data for the Warm Home Discount service
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      assessment:
                        $ref: '#/components/schemas/WarmHomeDiscountAssessmentDetails'
        '400':
          description: The assessmentId parameter is badly formatted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Domestic EPC with this RRN not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /greendeal/assessments/{assessmentId}:
    get:
      tags:
        - Green Deal
      summary: 'Get the Green Deal details from the assessment with reference
                {assessmentId}'
      description: Get any Green Deals against an assessment
      operationId: get-assessment-green-deals
      security:
        - oauth:
            - 'greendeal:plans'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being requested, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      responses:
        '200':
          description: Green Deal Energy Performance data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      assessment:
                        $ref: '#/components/schemas/AssessmentGreenDealDetails'
        '400':
          description: The assessmentId parameter is badly formatted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Assessment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '410':
          description: Gone - Assessment with ID assessmentId exists but has been cancelled/marked not for issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /greendeal/assessments/{assessmentId}/xml:
    get:
      tags:
        - Green Deal
      summary: 'Get the redacted RdSAP XML for the assessment with reference
                {assessmentId}. The response will consist of redacted EPC XML
                that consists of the XML document as originally lodged, with the
                exception of the following redacted elements and their children:
                <Identification>
                <Configuration>
                <Calculation-Software-Name>
                <Calculation-Software-Version>
                <Inspection-Date>
                <Completion-Date>
                <Registration-Date>
                <Status>
                <Restricted-Access>
                <Transaction-Type>
                <Seller-Commission-Report>
                <Energy-Assessor>
                <Address>
                <Related-Party-Disclosure>
                <Insurance-Details>'
      description: Get RdSAP assessment XML with sensitive nodes redacted
      operationId: get-redacted-assessment-xml
      security:
        - oauth:
            - 'greendeal:plans'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being requested, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      responses:
        '200':
          description: Green Deal redacted EPC XML data
          content:
            application/xml:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Empty'
        '400':
          description: 'The assessmentId parameter is badly formatted, or does
                        not relate to an RdSAP assessment'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Assessment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '410':
          description: 'Gone - Assessment with ID assessmentId exists but has
                        been cancelled/marked not for issue'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /greendeal/rhi/assessments/{assessmentId}/latest:
    get:
      tags:
        - Green Deal
      summary: 'Get the RHI details of the most recent Energy Performance
                Assessment for the address of the assessment with reference
                {assessmentId}'
      description: Get RHI details for assessment address's most recent assessment
      operationId: get-latest-rhi
      security:
        - oauth:
            - 'greendeal:plans'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being requested, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      responses:
        '200':
          description: RHI Energy Performance data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      assessment:
                        $ref: '#/components/schemas/AssessmentRHIDetails'
        '400':
          description: The assessmentId parameter is badly formatted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Assessment with this ID not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '410':
          description: Assessment with this ID exists but has been CANCELLED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /greendeal/disclosure/assessments/{assessmentId}/plans:
    post:
      tags:
        - Green Deal
      summary: 'Disclose new live Green Deal plan to appear on EPC with RRN
                {assessmentId}'
      description: Accept disclosure of new live Green Deal plan against assessment
      operationId: accept-green-deal-disclosure
      security:
        - oauth:
            - 'greendeal:plans'
      parameters:
        - in: path
          name: assessmentId
          required: true
          description: 'The ID of the assessment being requested, usually RRN'
          schema:
            $ref: '#/components/schemas/AssessmentId'
      requestBody:
        description: Green Deal disclosure data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GreenDealPlan'
      responses:
        '201':
          description: Green Deal disclosure successfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GreenDealPlan'
        '400':
          description: Problem with Green Deal record request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Energy assessment with RRN assessmentId can not be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Plan with the submitted ID already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '410':
          description: Assessment has been cancelled or not for issue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /greendeal/disclosure/plans/{planId}:
    put:
      tags:
        - Green Deal
      summary: 'Update an existing Green Deal plan'
      description: Update a Green Deal plan
      operationId: update-green-deal-plan
      security:
        - oauth:
            - 'greendeal:plans'
      parameters:
        - in: path
          name: planId
          required: true
          description: 'The ID of the plan being updated'
          schema:
            $ref: '#/components/schemas/GreenDealPlanId'
      requestBody:
        description: Green Deal disclosure data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GreenDealPlan'
      responses:
        '200':
          description: Green Deal disclosure successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GreenDealPlan'
        '400':
          description: Problem with Green Deal record request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Green Deal plan with ID planId can not be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Identifier in request body doesn't match the planId in the URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Green Deal
      summary: 'Delete an existing Green Deal plan'
      description: Delete an existing Green Deal plan
      operationId: delete-green-deal-plan
      security:
        - oauth:
            - 'greendeal:plans'
      parameters:
        - in: path
          name: planId
          required: true
          description: 'The ID of the plan being deleted'
          schema:
            $ref: '#/components/schemas/GreenDealPlanId'
      responses:
        '204':
          description: Green Deal disclosure successfully deleted
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Green Deal plan with ID planId can not be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /reports/assessments/region-and-type:
    get:
      tags:
        - Reports
      summary: 'Gets the data regarding matching postcodes to regions'
      description: Get region and type assessment data
      operationId: get-region-and-type-report
      security:
        - oauth:
            - 'reporting:assessment_by_type_and_region'
      parameters:
        - in: query
          name: startDate
          required: true
          description: 'The start date of the range (inclusive)'
          schema:
            type: string
            format: date
            example: '2020-11-01'
        - in: query
          name: endDate
          required: true
          description: 'The end date of the range (exclusive)'
          schema:
            type: string
            format: date
            example: '2020-12-01'
      responses:
        '200':
          description: ONS postcodes
          content:
            text/csv: {}
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /reports/assessments/scheme-and-type:
    get:
      tags:
        - Reports
      summary: >-
        Creates a report of the number of assessments lodged between
        two dates broken down by assessment type and lodging scheme
      description: Get report of assessment counts split by type and scheme
      operationId: get-assessment-counts-by-scheme-and-type-report
      security:
        - oauth:
            - 'reporting:assessment_by_scheme_and_type'
      parameters:
        - in: query
          name: startDate
          required: true
          description: 'The start date of the range (inclusive)'
          schema:
            type: string
            format: date
            example: '2020-11-01'
        - in: query
          name: endDate
          required: true
          description: 'The end date of the range (exclusive)'
          schema:
            type: string
            format: date
            example: '2020-12-01'
      responses:
        '200':
          description: Report of lodgements by type and scheme
          content:
            text/csv:
              example: >-
                number_of_assessments,scheme_name,type_of_assessment
                1,test scheme,AC-CERT
                1,test scheme,AC-REPORT
                1,test scheme,AC-REPORT+CERT
                1,test scheme,CEPC
                1,test scheme,CEPC+RR
                1,test scheme,CEPC-RR
                1,test scheme,DEC
                1,test scheme,DEC+RR
                1,test scheme,DEC-RR
                1,test scheme,RdSAP
                1,test scheme,SAP
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /reports/assessments/scheme-and-type/rrn:
    get:
      tags:
        - Reports
      summary: >-
        Creates a report of lodgements made by each assessor scheme used for invoicing
      description: Get a report of lodgements by scheme
      operationId: get-assessments-by-scheme-report
      security:
        - oauth:
            - 'reporting:assessment_by_scheme_and_type'
      parameters:
        - in: query
          name: start_date
          required: true
          description: 'The start date of the range (inclusive)'
          schema:
            type: string
            format: date
            example: '2020-11-01'
        - in: query
          name: end_date
          required: true
          description: 'The end date of the range (exclusive)'
          schema:
            type: string
            format: date
            example: '2020-12-01'
        - in: query
          name: scheme_id
          required: false
          description: 'Filter by scheme id'
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Report of lodgements by type and scheme
          content:
            text/csv:
              example: >-
                rrn,scheme_name,type_of_assessment,related_rrn,lodged_at
                0000-0000-0000-0000-0001,Quidos Limited,RdSAP,,2021-07-01 00:02:45 UTC
                0000-0000-0000-0000-0002,Elmhurst Energy Systems Ltd,RdSAP,,2021-07-01 00:06:07 UTC
                0000-0000-0000-0000-0003,Elmhurst Energy Systems Ltd,RdSAP,,2021-07-01 00:07:17 UTC
                0000-0000-0000-0000-0004,Stroma Certification Ltd,RdSAP,,2021-07-01 00:07:20 UTC
                0000-0000-0000-0000-0004,Elmhurst Energy Systems Ltd,RdSAP,,2021-07-01 00:08:13 UTC
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /statistics:
    get:
      tags:
        - Service Performance
      summary: >-
        Fetch the statistics data displayed on the Service Performance page
      description: Get statistics data for EPCs
      operationId: get-assessment-statistics-data
      security:
        - oauth:
            - 'statistics:fetch'
      responses:
        '200':
          description: Lodgement statistics by type and month
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MonthAssessmentStatistic'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user-satisfaction:
    put:
      tags:
        - Service Performance
      summary: Add user satisfaction data for a month, for display on the Service Performance page
      description: Update user satisfaction
      operationId: put-user-satisfaction
      security:
        - oauth:
            - 'admin:upload_stats'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSatisfaction"
      responses:
        '200':
          description: Confirmation of successful update
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: "User satisfaction statistics have been saved"
                  meta:
                    type: object
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /interesting-numbers:
    get:
      tags:
        - Service Performance
      summary: Some interesting numbers about recent activity on the register
      description: Interesting register numbers
      operationId: get-interesting-numbers
      security:
        - oauth:
            - 'statistics:fetch'
      responses:
        '200':
          description: Interesting numbers about recent activity on the register, where all known interesting numbers are available
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: A list of existing interesting numbers
                    items:
                      $ref: "#/components/schemas/InterestingNumber"
                  meta:
                    type: object

        '202':
          description: Interesting numbers about recent activity on the register, where not all known interesting numbers are available
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    description: A list of existing interesting numbers
                    items:
                      $ref: "#/components/schemas/InterestingNumber"
                  meta:
                    type: object

components:
  securitySchemes:
    oauth:
      type: oauth2
      description: This API uses OAuth 2 with the client credentials grant flow
      flows:
        clientCredentials:
          tokenUrl: /auth/oauth/token
          scopes:
            'scheme:create': Create a new scheme on the register
            'scheme:list': List schemes on the register
            'scheme:assessor:list': List assessors
            'scheme:assessor:update': Add or Update assessors
            'scheme:assessor:fetch': Get full details of an individual assessor
            'assessment:fetch': Get full details of an individual assessment
            'assessmentmetadata:fetch': Get the additional attributes we require for assessments
            'assessment:lodge': Lodge a new assessment with the register
            'assessment:search': Search the register for an assessment
            'assessor:search': Search the register for an assessor
            'address:search': List addresses that match a given search criteria, along with existing assessments
            'migrate:assessment': Migrate an assessment to the register
            'report:assessor:status': Get a report of changes to assessors status for a given date
            'greendeal:plans': Access all services necessary for the Green Deal register integration
            'bus:assessment:search': Carry out Boiler Upgrade Scheme search for latest EPC data
            'retrofit-advice:assessment:fetch': Carry out Home Energy Retrofit Advice lookup for latest domestic EPC data
            'heat-pump-check:assessment:fetch': Carry out Heat Pump Check lookup for latest domestic EPC data
            'warm-home-discount:assessment:fetch': Carry out Warm Home Discount lookup for latest domestic EPC data

  schemas:
    # Addresses
    Address:
      type: object
      properties:
        source:
          $ref: '#/components/schemas/AddressSource'
        line1:
          $ref: '#/components/schemas/AddressLine1'
        line2:
          type: string
          example: ''
        line3:
          type: string
          example: ''
        line4:
          type: string
          example: ''
        town:
          $ref: '#/components/schemas/AddressTown'
        postcode:
          $ref: '#/components/schemas/AddressPostcode'

    AddressStyle2:
      type: object
      properties:
        addressLine1:
          type: string
          example: '22 Acacia Avenue'
        addressLine2:
          type: string
          example: 'Upper Wellgood'
        addressLine3:
          type: string
          example: ''
        addressLine4:
          type: string
          example: ''
        town:
          type: string
          example: 'Fulchester'
        postcode:
          $ref: '#/components/schemas/AddressPostcode'

    AddressDetail:
      allOf:
        - $ref: '#/components/schemas/Address'
        - type: object
          properties:
            addressId:
              $ref: '#/components/schemas/AddressId'
            existingAssessments:
              type: array
              items:
                type: object
                properties:
                  assessmentId:
                    $ref: '#/components/schemas/AssessmentId'
                  assessmentStatus:
                    $ref: '#/components/schemas/AssessmentStatus'
                  assessmentType:
                    $ref: '#/components/schemas/AssessmentType'

    AddressId:
      oneOf:
        - $ref: '#/components/schemas/AddressUprn'
        - $ref: '#/components/schemas/RrnReferenceAddressId'
        - $ref: '#/components/schemas/AddressLprn'
      description: 'An identifier for an address, which is one of:
                    * An OS gazetteer UPRN (prefixed UPRN-)
                    * The reference number of the report this address appears on (prefixed RRN-)'
      example: 'UPRN-716375734512'

    LPaddedUprn:
      type: string
      pattern: '^\d{12}$'
      description: "An OS gazetteer UPRN (12-digits, left-padded with zeroes)"
      example: '001234567890'

    AddressUprn:
      type: string
      pattern: '^UPRN-\d{12}$'
      description: "An OS gazetteer UPRN (prefixed UPRN-)"
      example: 'UPRN-716375734512'

    RrnReferenceAddressId:
      type: string
      pattern: '^RRN-\d{4}-\d{4}-\d{4}-\d{4}-\d{4}$'
      description: "The reference number of the report this address appears on (prefixed RRN-)"
      example: 'RRN-0000-0000-1111-2222-3333'

    AddressLprn:
      type: string
      pattern: '^LPRN-\d{10}$'
      description: "A property reference number as formerly used by Landmark"
      example: 'LPRN-7876876234'

    AddressBuildingNameOrNumber:
      type: string
      minLength: 1
      example: "Shell House"
      description: 'A street number ("42") or a building name ("Cromwell Building")'

    AddressLine1:
      type: string
      example: '22 Acacia Avenue'

    AddressTown:
      type: string
      example: 'Fulchester'

    AddressPostcode:
      type: string
      example: 'FL23 4JA'

    AddressSource:
      type: string
      enum:
        - GAZETTEER
        - PREVIOUS_ASSESSMENT
      example: 'GAZETTEER'

    SchemaName:
      type: string
      description: 'An identifier for the versioned XML schema used for the lodged assessment XML'
      example: 'RdSAP-Schema-20.0.0'

    AddressSearchResults:
      type: object
      properties:
        data:
          type: object
          properties:
            addresses:
              type: array
              items:
                $ref: '#/components/schemas/AddressDetail'
        meta:
          type: object
          properties:
            filters:
              type: object
              description: >-
                The filters object will contain the search parameters provided
                in the initial request.

    # Assessors
    Assessor:
      type: object
      properties:
        firstName:
          type: string
          example: 'Joe'
        lastName:
          type: string
          example: 'Bloggs'
        middleNames:
          type: string
          example: 'T'
        contactDetails:
          type: object
          properties:
            telephoneNumber:
              type: string
              maxLength: 256
              example: '01632 960375'
            email:
              type: string
              format: email
              example: 'j.t.bloggs@example.com'
        qualifications:
          $ref: '#/components/schemas/AssessorQualifications'
        alsoKnownAs:
          type: string
          example: 'Joey'

    AssessorBody:
      allOf:
        - $ref: '#/components/schemas/Assessor'
        - type: object
          properties:
            dateOfBirth:
              type: string
              format: date
              example: '1980-01-10'
            searchResultsComparisonPostcode:
              $ref: '#/components/schemas/AddressPostcode'
            address:
              $ref: '#/components/schemas/AssessorAddress'
            companyDetails:
              $ref: '#/components/schemas/CompanyDetails'

    AssessorDetail:
      allOf:
        - $ref: '#/components/schemas/Assessor'
        - type: object
          properties:
            assessorSchemeId:
              $ref: '#/components/schemas/AssessorSchemeId'
            registeredBy:
              $ref: '#/components/schemas/Scheme'

    AssessorSearchResults:
      type: object
      properties:
        data:
          type: object
          properties:
            assessors:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/AssessorDetail'

    AssessorSearchByPostcodeResults:
      allOf:
        - $ref: '#/components/schemas/AssessorSearchResults'
        - type: object
          properties:
            data:
              type: object
              properties:
                assessors:
                  type: array
                  items:
                    type: object
                    properties:
                      distanceFromPostcodeInMiles:
                        type: number
                        example: 0.2

    AssessorSchemeId:
      type: string
      example: 'TEST000001'

    AssessorAddress:
      type: object
      properties:
        addressLine1:
          $ref: '#/components/schemas/AddressLine1'
        addressLine2:
          type: string
          example: ''
        addressLine3:
          type: string
          example: ''
        addressLine4:
          type: string
          example: ''
        town:
          $ref: '#/components/schemas/AddressTown'
        postcode:
          $ref: '#/components/schemas/AddressPostcode'

    CompanyDetails:
      type: object
      properties:
        companyRegNo:
          type: string
          example: ''
        companyAddressLine1:
          $ref: '#/components/schemas/AddressLine1'
        companyAddressLine2:
          type: string
          example: ''
        companyAddressLine3:
          type: string
          example: ''
        companyTown:
          $ref: '#/components/schemas/AddressTown'
        companyPostcode:
          $ref: '#/components/schemas/AddressPostcode'
        companyWebsite:
          type: string
          example: ''
        companyTelephoneNumber:
          type: string
          example: ''
        companyEmail:
          type: string
          example: ''
        companyName:
          type: string
          example: ''

    AssessorQualifications:
      type: object
      properties:
        domesticRdSap:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        domesticSap:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        nonDomesticDec:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        nonDomesticNos3:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        nonDomesticNos4:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        nonDomesticNos5:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        nonDomesticSp3:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        nonDomesticCc4:
          $ref: '#/components/schemas/AssessorQualificationStatus'
        gda:
          $ref: '#/components/schemas/AssessorQualificationStatus'

    AssessorQualificationSearchOptions:
      type: string
      example: domesticRdSap
      enum:
        - domesticRdSap
        - domesticSap
        - nonDomesticDec
        - nonDomesticNos3
        - nonDomesticNos4
        - nonDomesticNos5
        - nonDomesticSp3
        - nonDomesticCc4
        - gda

    AssessorQualificationTypeSearchOptions:
      type: string
      example: domestic
      enum:
        - domestic
        - nonDomestic

    AssessorQualificationStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - STRUCKOFF
        - SUSPENDED
      example: 'ACTIVE'

    AssessorQualificationChangeEvent:
      type: object
      properties:
        firstName:
          type: string
          example: "Joe"
        middleNames:
          type: string
          example: "T"
        lastName:
          type: string
          example: "Bloggs"
        assessorSchemeId:
          type: string
          example: "TEST00001"
        dateOfBirth:
          type: string
          format: date
          example: "1974-12-28"
        qualificationChange:
          type: object
          properties:
            qualificationType:
              type: string
              example: domesticEnergyPerformanceCertificates
            previousStatus:
              $ref: '#/components/schemas/AssessorQualificationStatus'
            newStatus:
              allOf:
                - $ref: '#/components/schemas/AssessorQualificationStatus'
                - example: 'STRUCKOFF'

    AssessorFullName:
      type: string
      example: 'Joe Bloggs'

    FirstName:
      type: string
      example: 'Joe'

    LastName:
      type: string
      example: 'Bloggs'

    DateOfBirth:
      type: string
      format: date
      example: '1980-01-10'

    # Assessments
    AssessmentId:
      type: string
      pattern: '^\d{4}-\d{4}-\d{4}-\d{4}-\d{4}$'
      example: '0000-0000-0000-0000-0000'

    AssessmentStatus:
      type: string
      example: ENTERED
      enum:
        - ENTERED
        - EXPIRED
        - CANCELLED
        - NOT_FOR_ISSUE

    AssessmentType:
      type: string
      example: 'RdSAP'
      enum:
        - RdSAP
        - SAP
        - CEPC
        - CEPC-RR
        - DEC
        - DEC-RR
        - AC-CERT
        - AC-REPORT

    EnergyAssessmentSearchResult:
      type: object
      properties:
        dateOfAssessment:
          type: string
          format: date
          description: The date that the assessor carried out the assessment of the property
        dateOfRegistration:
          type: string
          format: date
          description: The date that the assessment was submitted to the register
        dateOfExpiry:
          type: string
          format: date
          description: The date that the certificate expires
        typeOfAssessment:
          $ref: '#/components/schemas/AssessmentType'
        assessmentId:
          $ref: '#/components/schemas/AssessmentId'
        currentEnergyEfficiencyRating:
          type: integer
          minimum: 1
          maximum: 100
          example: 62
          description: The current energy rating to be submitted to the Register
        currentEnergyEfficiencyBand:
          type: string
          example: 'c'
          description: The band, from a to g, the current Energy Rating falls within
        optOut:
          type: boolean
          example: false
        addressId:
          $ref: '#/components/schemas/AddressId'
        addressLine1:
          $ref: '#/components/schemas/AddressLine1'
        addressLine2:
          type: string
          example: ''
        addressLine3:
          type: string
          example: ''
        addressLine4:
          type: string
          example: ''
        town:
          $ref: '#/components/schemas/AddressTown'
        postcode:
          $ref: '#/components/schemas/AddressPostcode'
        status:
          $ref: '#/components/schemas/AssessmentStatus'
        createdAt:
          type: string
          format: date-time
          nullable: true
          description: Date and time of lodgement in UTC timezone for assessments post September 2020
          example: '2020-09-19T09:00:00Z'

    DomesticEPCsSearchResult:
      type: object
      description: 'A reference to the most recent domestic EPC for the address also referenced in the result'
      properties:
        epcRrn:
          $ref: '#/components/schemas/AssessmentId'
        address:
          $ref: '#/components/schemas/AddressStyle2'

    CommercialEnergyAssessmentSummary:
      $ref: '#/components/schemas/Empty'

    DomesticEnergyAssessmentSummary:
      type: object
      properties:
        typeOfAssessment:
          $ref: '#/components/schemas/AssessmentType'
        assessmentId:
          $ref: '#/components/schemas/AssessmentId'
        dateOfExpiry:
          type: string
          format: date
          description: The date that the certificate expires
        dateOfAssessment:
          type: string
          format: date
          description: The date that the assessor carried out the assessment of the property
        dateOfRegistration:
          type: string
          format: date
          description: The date that the assessment was submitted to the Register
        dateRegistered:
          type: string
          format: date
          description: The date that the assessment was submitted to the Register
        addressLine1:
          $ref: '#/components/schemas/AddressLine1'
        addressLine2:
          type: string
          example: ''
        addressLine3:
          type: string
          example: ''
        addressLine4:
          type: string
          example: ''
        town:
          $ref: '#/components/schemas/AddressTown'
        postcode:
          $ref: '#/components/schemas/AddressPostcode'
        address:
          type: object
          properties:
            addressId:
              $ref: '#/components/schemas/AddressId'
            addressLine1:
              $ref: '#/components/schemas/AddressLine1'
            addressLine2:
              type: string
              example: ''
            addressLine3:
              type: string
              example: ''
            addressLine4:
              type: string
              example: ''
            town:
              $ref: '#/components/schemas/AddressTown'
            postcode:
              $ref: '#/components/schemas/AddressPostcode'
        assessor:
          type: object
          properties:
            firstName:
              type: string
              example: 'Joe'
            lastName:
              type: string
              example: 'Bloggs'
            middleNames:
              type: string
              example: 'T'
            registeredBy:
              type: object
              properties:
                name:
                  type: string
                  example: 'Stroma Certification Ltd'
                schemeId:
                  type: integer
                  example: 5
            schemeAssessorId:
              $ref: '#/components/schemas/AssessorSchemeId'
            contactDetails:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: 'j.t.bloggs@example.com'
                telephoneNumber:
                  type: string
                  maxLength: 256
                  example: '01632 960375'
            searchResultsComparisonPostcode:
              $ref: '#/components/schemas/AddressPostcode'
            address:
              type: object
            companyDetails:
              $ref: '#/components/schemas/CompanyDetails'
            qualifications:
              $ref: '#/components/schemas/AssessorQualifications'
            dateOfBirth:
              type: string
              format: date
              example: '1974-12-28'
        currentCarbonEmission:
          type: number
          description: The current carbon emission of the property
          example: 4.736
        currentEnergyEfficiencyBand:
          type: string
          example: 'c'
          description: The band, from a to g, the current Energy Rating falls within
        currentEnergyEfficiencyRating:
          type: integer
          minimum: 1
          maximum: 100
          example: 62
          description: The current energy rating to be submitted to the Register
        dwellingType:
          type: string
        estimatedEnergyCost:
          type: string
          example: '1307.00'
        mainFuelType:
          type: string
          example: '28'
        heatDemand:
          type: object
          properties:
            currentSpaceHeatingDemand:
              type: number
              example: 456.45
            currentWaterHeatingDemand:
              type: number
              example: 325.33
            impactOfLoftInsulation:
              type: integer
              example: -453
            impactOfCavityInsulation:
              type: integer
              example: -84
            impactOfSolidWallInsulation:
              type: integer
              example: -21
        totalFloorArea:
          type: number
          example: 120.55
        potentialCarbonEmission:
          type: number
          description: The potential carbon emission of the propety
          example: 2.839
        potentialEnergyEfficiencyBand:
          type: string
          example: 'a'
          description: The band, from a to g, the potential Energy Rating falls within
        potentialEnergyEfficiencyRating:
          type: integer
          minimum: 1
          maximum: 100
          description: The potential energy rating to be submitted, must be equal to or larger than currentEnergyEfficiencyRating
        primaryEnergyUse:
          type: number
          example: 598
        propertySummary:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/PropertySummary'
        recommendedImprovements:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/DomesticRecommendationWithoutCode'
              - $ref: '#/components/schemas/DomesticRecommendationWithCode'
        lzcEnergySources:
          type: array
          items:
            type: integer
            example: 11
          nullable: true
          description: Low and zero carbon energy sources for the property
          example: [11]
        addendum:
          anyOf:
            - $ref: '#/components/schemas/Addendum'
          nullable: true
          description: Additional information about the property
        supersededBy:
          type: string
          nullable: true
          description: The RRN of the assessment that has superseded this one, if one exists

    EnergyAssessmentMetadata:
      type: object
      properties:
        typeOfAssessment:
          $ref: '#/components/schemas/AssessmentType'
        optOut:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: '2020-08-09T12:34:56.789Z'
          nullable: true
        cancelledAt:
          type: string
          format: date-time
          example: '2021-04-26T16:32:01.703Z'
          nullable: true
        notForIssueAt:
          type: string
          format: date-time
          example: '2020-11-21T05:34:21.623Z'
          nullable: true
        schemaType:
          $ref: '#/components/schemas/SchemaName'
        assessmentAddressId:
          $ref: '#/components/schemas/AddressId'

    PropertySummary:
      type: object
      properties:
        name:
          type: string
          example: "Walls"
          description: "The name of the feature of the property"
        description:
          type: string
          example: "Solid brick, as built, no insulation (assumed)"
        energyEfficiencyRating:
          type: number
          example: 2
        environmentalEfficiencyRating:
          type: number
          example: 0

    DomesticRecommendationWithoutCode:
      type: object
      properties:
        sequence:
          type: number
          example: 0
          description: "The order in which this recommendation should be shown"
        indicativeCost:
          type: string
          example: "£200 - £4,000"
        typicalSaving:
          type: number
          example: 400.21
        improvementCategory:
          type: string
        improvementType:
          type: string
        improvementTitle:
          type: string
        improvementDescription:
          type: string
        energyPerformanceRating:
          type: string
          description: "The estimated energy performance rating once the improvement has been carried out"
          example: "C"
        environmentalImpactRating:
          type: string
          description: "The estimated environmental impact rating once the improvement has been carried out"
        greenDealCategoryCode:
          type: string

    DomesticRecommendationWithCode:
      type: object
      properties:
        sequence:
          type: number
          example: 1
          description: "The order in which this recommendation should be shown"
        improvementCode:
          type: string
          example: "1"
        indicativeCost:
          type: string
          example: "£200 - £4,000"
        typicalSaving:
          type: number
          example: 400.21
        improvementCategory:
          type: string
        improvementType:
          type: string
        energyPerformanceRating:
          type: string
          description: "The estimated energy performance rating once the improvement has been carried out"
          example: "C"
        environmentalImpactRating:
          type: string
          description: "The estimated environmental impact rating once the improvement has been carried out"
        greenDealCategoryCode:
          type: string

    # Boiler Upgrade Scheme
    AssessmentBUSDetails:
      type: object
      properties:
        epcRrn:
          $ref: '#/components/schemas/AssessmentId'
        reportType:
          type: string
          enum:
            - SAP
            - RdSAP
            - CEPC
          example: 'RdSAP'
        lodgementDate:
          type: string
          format: date
          example: '2018-12-21'
        expiryDate:
          type: string
          format: date
          example: '2020-01-30'
        cavityWallInsulationRecommended:
          type: boolean
          example: false
          nullable: true
          description: "Whether cavity wall insulation was recommended as part of this assessment. NB. ensure type-checking of this value, as `null` (meaning information was not available, for example for CEPCs) is semantically different to `false` here."
        loftInsulationRecommended:
          type: boolean
          example: true
          nullable: true
          description: "Whether loft insulation was recommended as part of this assessment. NB. ensure type-checking of this value, as `null` (meaning information was not available, for example for CEPCs) is semantically different to `false` here."
        secondaryHeating:
          type: string
          example: 'Electric bar heater'
          nullable: true
        address:
          $ref: '#/components/schemas/AddressStyle2'
        dwellingType:
          type: string
          example: 'Top-floor flat'
          nullable: true
        uprn:
          type: string
          nullable: true
          example: '001234567890'

    MultipleBUSMatchesList:
      type: object
      properties:
        links:
          type: object
          properties:
            assessments:
              type: array
              items:
                $ref: '#/components/schemas/AssessmentId'
              example: [ "9876-9876-9876-9876-9876", "8765-8765-8765-8765-8765" ]

    # Home Energy Retrofit Advice
    RetrofitAdviceAssessmentDetails:
      type: object
      properties:
        typeOfAssessment:
          type: string
          enum: [ SAP, RdSAP ]
        address:
          $ref: '#/components/schemas/AddressStyle2'
        lodgementDate:
          type: string
          format: date
          example: '2020-02-29'
        isLatestAssessmentForAddress:
          type: boolean
          example: true
        propertyType:
          type: string
          example: 'Mid-floor flat'
        builtForm:
          type: string
          example: 'End-Terrace'
          description: 'A description of the built form of the property as per the known descriptions for the SAP-BuiltFormCode node type in SAP/RdSAP schemas.'
          nullable: true
        propertyAgeBand:
          type: string
          example: '2007-2011'
          nullable: true
        wallsDescription:
          type: array
          items:
            type: string
          example: ["Solid brick, as built, no insulation", "Cavity wall, as built, insulated (assumed)"]
          description: "A list of free text descriptions associated with wall property features as documented in the assessment."
        floorDescription:
          type: array
          items:
            type: string
          example: ["Suspended, no insulation (assumed)", "Solid, no insulation (assumed)"]
          description: "A list of free text descriptions associated with floor property features as documented in the assessment."
        roofDescription:
          type: array
          items:
            type: string
          example: ["Pitched, 250 mm loft insulation", "Pitched, limited insulation (assumed)"]
          description: "A list of free text descriptions associated with roof property features as documented in the assessment."
        windowsDescription:
          type: array
          items:
            type: string
          example: ["Fully double glazed"]
          description: "A list of free text descriptions associated with window property features as documented in the assessment."
        mainHeatingDescription:
          type: string
          example: "Boiler and radiators, mains gas"
          description: "A description of the main heating for the property as per the known descriptions for the SAP-MainHeatingCategoryCode node type in SAP/RdSAP schemas."
          nullable: true
        mainFuelType:
          type: string
          example: 'Natural Gas'
          description: "A description of the main fuel type for the property as per the known descriptions for the HeatingFuelTypeCode node type in SAP/RdSAP schemas."
          nullable: true
        hasHotWaterCylinder:
          description: Whether a hot water is cylinder is present at the property. Key is omitted from response if not recorded by the assessor.
          type: boolean
          example: true

    # Home Energy Retrofit Funding
    RetrofitFundingAssessmentDetails:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/AddressStyle2'
        uprn:
          type: string
          nullable: true
          example: '001234567890'
        lodgementDate:
          type: string
          format: date
          example: '2020-02-29'
        currentBand:
          type: string
          example: 'D'

    # Heat Pump Check
    HeatPumpCheckAssessmentDetails:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/AddressStyle2'
        lodgementDate:
          type: string
          format: date
          example: '2020-02-29'
        isLatestAssessmentForAddress:
          type: boolean
          example: true
        propertyType:
          type: string
          example: 'Mid-floor flat'
          nullable: true
        builtForm:
          type: string
          example: 'End-Terrace'
          description: 'A description of the built form of the property as per the known descriptions for the SAP-BuiltFormCode node type in SAP/RdSAP schemas.'
          nullable: true
        propertyAgeBand:
          type: string
          example: '2007-2011'
          nullable: true
        totalFloorArea:
          type: integer
          example: 171
          nullable: true
          description: 'The total floor area of the property in m².'
        wallsDescription:
          type: array
          items:
            type: string
          example: ["Solid brick, as built, no insulation", "Cavity wall, as built, insulated (assumed)"]
          description: "A list of free text descriptions associated with wall property features as documented in the assessment."
        roofDescription:
          type: array
          items:
            type: string
          example: ["Pitched, 250 mm loft insulation", "Pitched, limited insulation (assumed)"]
          description: "A list of free text descriptions associated with roof property features as documented in the assessment."
        windowsDescription:
          type: array
          items:
            type: string
          example: ["Fully double glazed"]
          description: "A list of free text descriptions associated with window property features as documented in the assessment."
        mainFuelType:
          type: string
          example: 'Natural Gas'
          description: "A description of the main fuel type for the property as per the known descriptions for the HeatingFuelTypeCode node type in SAP/RdSAP schemas."
          nullable: true
        hasMainsGas:
          type: boolean
          example: true
          nullable: true
          description: "Whether mains gas is available in the property. NB. a `null` value means that this data point is not available from this assessment."
        currentEnergyEfficiencyRating:
          type: integer
          minimum: 1
          maximum: 100
          example: 62
          description: "The current energy rating to be submitted to the Register"

    # Warm Home Discount
    WarmHomeDiscountAssessmentDetails:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/AddressStyle2'
        lodgementDate:
          type: string
          format: date
          example: '2020-02-29'
        isLatestAssessmentForAddress:
          type: boolean
          example: true
        propertyType:
          type: string
          example: 'Mid-floor flat'
        builtForm:
          type: string
          example: 'End-Terrace'
          description: 'A description of the built form of the property as per the known descriptions for the SAP-BuiltFormCode node type in SAP/RdSAP schemas.'
          nullable: true
        propertyAgeBand:
          type: string
          example: '2007-2011'
          nullable: true
        totalFloorArea:
          type: string
          example: "171.0"
          nullable: true
        typeOfProperty:
          type: string
          enum: [ House,Bungalow,Flat,Maisonette,Park home ]

    # Green Deal
    AssessmentGreenDealDetails:
      type: object
      properties:
        typeOfAssessment:
          type: string
          enum: [SAP, RdSAP]
        address:
          $ref: '#/components/schemas/Address'
        addressIdentifiers:
          description: 'List of address identifiers associated with this assessment - these may include:
                        * OS gazetteer UPRNS (prefixed UPRN-)
                        * Legacy reference numbers from the old register system (prefixed LPRN-)
                        * Reference numbers for reports for this address (prefixed RRN-)'
          type: array
          items:
            $ref: '#/components/schemas/AddressId'
          example: ["UPRN-716375734512", "LPRN-1234567890", "RRN-1234-1234-1234-1234-1234"]
        countryCode:
          type: string
          example: 'EAW'
        inspectionDate:
          type: string
          format: date
          example: '2020-02-29'
        lodgementDate:
          type: string
          format: date
          example: '2020-02-29'
        isLatestAssessmentForAddress:
          type: boolean
          example: true
        status:
          $ref: '#/components/schemas/AssessmentStatus'
        mainFuelType:
          type: string
          example: 'Natural Gas'
        secondaryFuelType:
          type: string
          example: 'Grid Supplied Electricity'
        waterHeatingFuel:
          type: string
          example: 'Smokeless Fuel (inc Coke)'

    AssessmentRHIDetails:
      type: object
      properties:
        epcRrn:
          $ref: '#/components/schemas/AssessmentId'
        assessorName:
          $ref: '#/components/schemas/AssessorFullName'
        reportType:
          type: string
          example: 'Energy Performance Certificate'
        inspectionDate:
          type: string
          format: date
          example: '2020-01-30'
        lodgementDate:
          type: string
          format: date
          example: '2020-02-29'
        dwellingType:
          type: string
          example: 'Top-floor flat'
        postcode:
          $ref: '#/components/schemas/AddressPostcode'
        propertyAgeBand:
          type: string
          example: 'D'
        tenure:
          type: string
          example: 'Owner-occupied'
        totalFloorArea:
          type: string
          example: '123.5 square metres'
        cavityWallInsulation:
          type: boolean
          example: false
        loftInsulation:
          type: boolean
          example: true
        spaceHeating:
          type: number
          example: 9901.00
        waterHeating:
          type: number
          example: 2654.00
        secondaryHeating:
          type: string
          example: 'Electric bar heater'
        energyEfficiency:
          $ref: '#/components/schemas/RHIEnergyEfficiency'

    RHIEnergyEfficiency:
      type: object
      properties:
        currentRating:
          type: number
          example: 64
        currentBand:
          type: string
          example: 'D'
        potentialRating:
          type: number
          example: 75
        potentialBand:
          type: string
          example: 'C'

    GreenDealPlanId:
      description: 'Green Deal plan ID - created by the Central Charge Database
                    (GDCC) when the plan is set up'
      type: string
      maxLength: 12
      example: 'ABC123456DEF'

    GreenDealPlan:
      type: object
      properties:
        greenDealPlanId:
          $ref: '#/components/schemas/GreenDealPlanId'
        startDate:
          description: The date the plan went live
          type: string
          format: date
          example: '2020-01-30'
        endDate:
          description: The date the plan is expected to end
          type: string
          format: date
          example: '2030-02-28'
        providerDetails:
          $ref: '#/components/schemas/GreenDealProvider'
        interest:
          $ref: '#/components/schemas/GreenDealInterest'
        chargeUplift:
          $ref: '#/components/schemas/GreenDealChargeUplift'
        ccaRegulated:
          description: 'Whether the Green Deal plan is regulated under the
                        Consumer Credit Act'
          type: boolean
          example: true
        structureChanged:
          description: 'Whether the provider knows or has reasonable cause to
                        believe that an alteration has been made to the Green
                        Deal property which, had it existed when the estimated
                        first year savings were calculated, would have affected
                        that calculation materially'
          type: boolean
          example: false
        measuresRemoved:
          description: 'Whether the provider knows or has reasonable cause to
                        believe that an improvement installed at the Green Deal
                        property under a green deal plan has been removed from
                        the property before the end of the improvement-specific
                        payment period'
          type: boolean
          example: false
        measures:
          type: array
          items:
            $ref: '#/components/schemas/GreenDealMeasure'
        charges:
          type: array
          items:
            $ref: '#/components/schemas/GreenDealCharge'
        savings:
          type: array
          items:
            $ref: '#/components/schemas/GreenDealSaving'

    GreenDealProvider:
      type: object
      description: Details relating to the provider of the plan
      properties:
        name:
          description: 'Name of the provider organisation responsible for the
                        Green Deal plan'
          type: string
          maxLength: 400
          example: 'The Bank'
        telephone:
          description: 'Phone number of the provider organisation responsible
                        for the Green Deal plan'
          type: string
          maxLength: 100
          example: '0800 0000000'
        email:
          description: 'Email address of the provider organisation responsible
                        for the Green Deal plan'
          type: string
          maxLength: 100
          example: 'lender@example.com'

    GreenDealInterest:
      type: object
      properties:
        rate:
          description: 'The interest rate (APR) on the Green Deal finance taken
                        out for the Green Deal plan'
          type: number
          minimum: 0
          maximum: 10000
          example: 12.3
        fixed:
          description: 'Whether the interest rate on the Green Deal plan is
                        fixed over the lifetime of the plan'
          type: boolean
          example: true

    GreenDealChargeUplift:
      type: object
      properties:
        amount:
          description: 'The percentage uplift in the Green Deal daily charge,
                        where applicable, otherwise zero'
          type: number
          minimum: 0
          maximum: 1000
          example: 1.25
        date:
          description: 'The date when the Green Deal daily charge uplift takes
                        effect, where an annual interest uplift is included as a
                        term of the Green Deal plan'
          type: string
          format: date
          example: '2025-03-29'

    GreenDealMeasure:
      type: object
      properties:
        sequence:
          type: integer
          example: 0
        measureType:
          description: 'The measure type of the specific measure installed under
                        the Green Deal plan'
          type: string
          example: 'Loft insulation'
        product:
          description: 'The product name of the specific measure installed under
                        the Green Deal plan'
          type: string
          example: 'WarmHome lagging stuff (TM)'
        repaidDate:
          description: 'Date the measure will be paid off under the Green Deal
                        plan payment schedule'
          type: string
          format: date
          example: '2025-03-29'

    GreenDealCharge:
      type: object
      properties:
        sequence:
          type: integer
          example: 0
        startDate:
          description: 'The start date at which the specified daily charge
                        starts taking effect'
          type: string
          format: date
          example: '2020-03-29'
        endDate:
          description: 'The end date at which the specified daily charge stops
                        taking effect'
          type: string
          format: date
          example: '2030-03-29'
        dailyCharge:
          description: 'The daily amount the customer will be paying through
                        their electricity bill'
          type: number
          minimum: 0
          maximum: 10000
          example: 0.34

    GreenDealSaving:
      type: object
      properties:
        sequence:
          type: integer
          example: 0
        fuelCode:
          description: 'Code which indicates the type of heating fuel'
          type: string
          example: '3'
          enum: ["3" ,"5" ,"6" ,"7" ,"8" ,"9" ,"15" ,"16" ,"17" ,"18" ,"19" ,"26" ,"27" ,"28" ,"33" ,"34" ,"35" ,"36" ,"37" ,"38" ,"39" ,"40" ,"41" ,"42" ,"43" ,"44" ,"45"]
        fuelSaving:
          description: 'Total kWh saving for the fuel (negative if increase),
                        allowing for in-use factors'
          type: number
          minimum: -10000000
          maximum: 10000000
        standingChargeFraction:
          description: 'Fraction of standing charge for the fuel applicable to
                        the saving, negative if standing charge applies after
                        improvements but not before, positive if standing
                        charge applies before improvements but not after,
                        zero otherwise'
          type: number
          minimum: -1
          maximum: 1
          example: -0.3

    Addendum:
      type: object
      properties:
        addendumNumber:
          type: array
          items:
            type: integer
            example: 8
          nullable: true
          example: [8]
        cavityFillRecommended:
          type: boolean
          example: true
        stoneWalls:
          type: boolean
          example: true
        systemBuild:
          type: boolean
          example: true
        accessIssues:
          type: boolean
          example: true
        highExposure:
          type: boolean
          example: true
        narrowCavities:
          type: boolean
          example: true

    MonthAssessmentStatistic:
      type: object
      properties:
        numAssessments:
          type: integer
          example: 64
        assessmentType:
          $ref: '#/components/schemas/AssessmentType'
        ratingAverage:
          type: number
          example: 74.35
        month:
          type: string
          example: '2021-07'

    UserSatisfaction:
      type: object
      properties:
        stats_date:
          description: 'The month and year of the survey(Dec 2021),
                        add 1 for the day'
          type: string
          format: date
          example: '2020-12-01'
        very_satisfied:
          type: integer
          example: 125
        satisfied:
          type: integer
          example: 895
        neither:
          type: integer
          example: 789
        dissatisfied:
          type: integer
          example: 123
        very_dissatisfied:
          type: integer
          example: 321

    InterestingNumber:
      type: object
      properties:
        name:
          type: string
          description: The unique reference name for the report/ interesting number
          example: heat_pumps_for_saps
        data:
          oneOf:
            - type: object
            - type: array
            - type: integer
            - type: number
        generatedAt:
          type: string
          format: date-time
          description: Date and time of interesting number generation in UTC timezone
          example: '2023-09-19T09:00:00Z'

    # Schemes
    Scheme:
      allOf:
        - $ref: '#/components/schemas/SchemeBody'
        - type: object
          properties:
            schemeId:
              type: string
              example: '432'

    SchemeBody:
      type: object
      properties:
        name:
          type: string
          example: 'EPCs 4 U'
        active:
          type: boolean
          example: true
          description: 'Whether or not the scheme is currently active'

    # General
    Empty:
      type: object

    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
                example: "NOT_FOUND"
              title:
                type: string
                example: "The thing you are looking for is not here"

  links: {}
  callbacks: {}
